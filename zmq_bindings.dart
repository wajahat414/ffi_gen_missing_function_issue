// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings to `headers/example.h`.
class NativeLibrary {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeLibrary(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeLibrary.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  ffi.Pointer<ffi.Int> __error() {
    return ___error();
  }

  late final ___errorPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int> Function()>>('__error');
  late final ___error =
      ___errorPtr.asFunction<ffi.Pointer<ffi.Int> Function()>();

  int renameat(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
    ffi.Pointer<ffi.Char> arg3,
  ) {
    return _renameat(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _renameatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('renameat');
  late final _renameat = _renameatPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  int renamex_np(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _renamex_np(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _renamex_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.UnsignedInt)>>('renamex_np');
  late final _renamex_np = _renamex_npPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int renameatx_np(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
    ffi.Pointer<ffi.Char> arg3,
    int arg4,
  ) {
    return _renameatx_np(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _renameatx_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>, ffi.UnsignedInt)>>('renameatx_np');
  late final _renameatx_np = _renameatx_npPtr.asFunction<
      int Function(
          int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>, int)>();

  late final ffi.Pointer<ffi.Pointer<FILE>> ___stdinp =
      _lookup<ffi.Pointer<FILE>>('__stdinp');

  ffi.Pointer<FILE> get __stdinp => ___stdinp.value;

  set __stdinp(ffi.Pointer<FILE> value) => ___stdinp.value = value;

  late final ffi.Pointer<ffi.Pointer<FILE>> ___stdoutp =
      _lookup<ffi.Pointer<FILE>>('__stdoutp');

  ffi.Pointer<FILE> get __stdoutp => ___stdoutp.value;

  set __stdoutp(ffi.Pointer<FILE> value) => ___stdoutp.value = value;

  late final ffi.Pointer<ffi.Pointer<FILE>> ___stderrp =
      _lookup<ffi.Pointer<FILE>>('__stderrp');

  ffi.Pointer<FILE> get __stderrp => ___stderrp.value;

  set __stderrp(ffi.Pointer<FILE> value) => ___stderrp.value = value;

  void clearerr(
    ffi.Pointer<FILE> arg0,
  ) {
    return _clearerr(
      arg0,
    );
  }

  late final _clearerrPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'clearerr');
  late final _clearerr =
      _clearerrPtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int fclose(
    ffi.Pointer<FILE> arg0,
  ) {
    return _fclose(
      arg0,
    );
  }

  late final _fclosePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fclose');
  late final _fclose = _fclosePtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int feof(
    ffi.Pointer<FILE> arg0,
  ) {
    return _feof(
      arg0,
    );
  }

  late final _feofPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('feof');
  late final _feof = _feofPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int ferror(
    ffi.Pointer<FILE> arg0,
  ) {
    return _ferror(
      arg0,
    );
  }

  late final _ferrorPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ferror');
  late final _ferror = _ferrorPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fflush(
    ffi.Pointer<FILE> arg0,
  ) {
    return _fflush(
      arg0,
    );
  }

  late final _fflushPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fflush');
  late final _fflush = _fflushPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fgetc(
    ffi.Pointer<FILE> arg0,
  ) {
    return _fgetc(
      arg0,
    );
  }

  late final _fgetcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('fgetc');
  late final _fgetc = _fgetcPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fgetpos(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<fpos_t> arg1,
  ) {
    return _fgetpos(
      arg0,
      arg1,
    );
  }

  late final _fgetposPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fgetpos');
  late final _fgetpos = _fgetposPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  ffi.Pointer<ffi.Char> fgets(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    ffi.Pointer<FILE> arg2,
  ) {
    return _fgets(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _fgetsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int, ffi.Pointer<FILE>)>>('fgets');
  late final _fgets = _fgetsPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> fopen(
    ffi.Pointer<ffi.Char> __filename,
    ffi.Pointer<ffi.Char> __mode,
  ) {
    return _fopen(
      __filename,
      __mode,
    );
  }

  late final _fopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('fopen');
  late final _fopen = _fopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int fprintf(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _fprintf(
      arg0,
      arg1,
    );
  }

  late final _fprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fprintf');
  late final _fprintf = _fprintfPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int fputc(
    int arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return _fputc(
      arg0,
      arg1,
    );
  }

  late final _fputcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'fputc');
  late final _fputc =
      _fputcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int fputs(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return _fputs(
      arg0,
      arg1,
    );
  }

  late final _fputsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>>('fputs');
  late final _fputs = _fputsPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>();

  int fread(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __nitems,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fread(
      __ptr,
      __size,
      __nitems,
      __stream,
    );
  }

  late final _freadPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size,
              ffi.Pointer<FILE>)>>('fread');
  late final _fread = _freadPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> freopen(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<FILE> arg2,
  ) {
    return _freopen(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _freopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>>('freopen');
  late final _freopen = _freopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>();

  int fscanf(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _fscanf(
      arg0,
      arg1,
    );
  }

  late final _fscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fscanf');
  late final _fscanf = _fscanfPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int fseek(
    ffi.Pointer<FILE> arg0,
    int arg1,
    int arg2,
  ) {
    return _fseek(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _fseekPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Long, ffi.Int)>>('fseek');
  late final _fseek =
      _fseekPtr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int fsetpos(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<fpos_t> arg1,
  ) {
    return _fsetpos(
      arg0,
      arg1,
    );
  }

  late final _fsetposPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fsetpos');
  late final _fsetpos = _fsetposPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  int ftell(
    ffi.Pointer<FILE> arg0,
  ) {
    return _ftell(
      arg0,
    );
  }

  late final _ftellPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<FILE>)>>(
          'ftell');
  late final _ftell = _ftellPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fwrite(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __nitems,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fwrite(
      __ptr,
      __size,
      __nitems,
      __stream,
    );
  }

  late final _fwritePtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size,
              ffi.Pointer<FILE>)>>('fwrite');
  late final _fwrite = _fwritePtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int getc(
    ffi.Pointer<FILE> arg0,
  ) {
    return _getc(
      arg0,
    );
  }

  late final _getcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('getc');
  late final _getc = _getcPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getchar() {
    return _getchar();
  }

  late final _getcharPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getchar');
  late final _getchar = _getcharPtr.asFunction<int Function()>();

  ffi.Pointer<ffi.Char> gets(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _gets(
      arg0,
    );
  }

  late final _getsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('gets');
  late final _gets = _getsPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  void perror(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _perror(
      arg0,
    );
  }

  late final _perrorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'perror');
  late final _perror =
      _perrorPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  int printf(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _printf(
      arg0,
    );
  }

  late final _printfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'printf');
  late final _printf =
      _printfPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int putc(
    int arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return _putc(
      arg0,
      arg1,
    );
  }

  late final _putcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putc');
  late final _putc =
      _putcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putchar(
    int arg0,
  ) {
    return _putchar(
      arg0,
    );
  }

  late final _putcharPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('putchar');
  late final _putchar = _putcharPtr.asFunction<int Function(int)>();

  int puts(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _puts(
      arg0,
    );
  }

  late final _putsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'puts');
  late final _puts = _putsPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int remove(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _remove(
      arg0,
    );
  }

  late final _removePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'remove');
  late final _remove =
      _removePtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int rename(
    ffi.Pointer<ffi.Char> __old,
    ffi.Pointer<ffi.Char> __new,
  ) {
    return _rename(
      __old,
      __new,
    );
  }

  late final _renamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('rename');
  late final _rename = _renamePtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  void rewind(
    ffi.Pointer<FILE> arg0,
  ) {
    return _rewind(
      arg0,
    );
  }

  late final _rewindPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'rewind');
  late final _rewind =
      _rewindPtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int scanf(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _scanf(
      arg0,
    );
  }

  late final _scanfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'scanf');
  late final _scanf =
      _scanfPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  void setbuf(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _setbuf(
      arg0,
      arg1,
    );
  }

  late final _setbufPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('setbuf');
  late final _setbuf = _setbufPtr
      .asFunction<void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int setvbuf(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
    int arg3,
  ) {
    return _setvbuf(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _setvbufPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Size)>>('setvbuf');
  late final _setvbuf = _setvbufPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int, int)>();

  int sprintf(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _sprintf(
      arg0,
      arg1,
    );
  }

  late final _sprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sprintf');
  late final _sprintf = _sprintfPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int sscanf(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _sscanf(
      arg0,
      arg1,
    );
  }

  late final _sscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sscanf');
  late final _sscanf = _sscanfPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> tmpfile() {
    return _tmpfile();
  }

  late final _tmpfilePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<FILE> Function()>>('tmpfile');
  late final _tmpfile = _tmpfilePtr.asFunction<ffi.Pointer<FILE> Function()>();

  ffi.Pointer<ffi.Char> tmpnam(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _tmpnam(
      arg0,
    );
  }

  late final _tmpnamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('tmpnam');
  late final _tmpnam = _tmpnamPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int ungetc(
    int arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return _ungetc(
      arg0,
      arg1,
    );
  }

  late final _ungetcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'ungetc');
  late final _ungetc =
      _ungetcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int vfprintf(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<__va_list_tag> arg2,
  ) {
    return _vfprintf(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _vfprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>>('vfprintf');
  late final _vfprintf = _vfprintfPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<__va_list_tag>)>();

  int vprintf(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<__va_list_tag> arg1,
  ) {
    return _vprintf(
      arg0,
      arg1,
    );
  }

  late final _vprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<__va_list_tag>)>>('vprintf');
  late final _vprintf = _vprintfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<__va_list_tag>)>();

  int vsprintf(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<__va_list_tag> arg2,
  ) {
    return _vsprintf(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _vsprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>>('vsprintf');
  late final _vsprintf = _vsprintfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<__va_list_tag>)>();

  ffi.Pointer<ffi.Char> ctermid(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _ctermid(
      arg0,
    );
  }

  late final _ctermidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('ctermid');
  late final _ctermid = _ctermidPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> fdopen(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _fdopen(
      arg0,
      arg1,
    );
  }

  late final _fdopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Int, ffi.Pointer<ffi.Char>)>>('fdopen');
  late final _fdopen = _fdopenPtr
      .asFunction<ffi.Pointer<FILE> Function(int, ffi.Pointer<ffi.Char>)>();

  int fileno(
    ffi.Pointer<FILE> arg0,
  ) {
    return _fileno(
      arg0,
    );
  }

  late final _filenoPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fileno');
  late final _fileno = _filenoPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int pclose(
    ffi.Pointer<FILE> arg0,
  ) {
    return _pclose(
      arg0,
    );
  }

  late final _pclosePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'pclose');
  late final _pclose = _pclosePtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> popen(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _popen(
      arg0,
      arg1,
    );
  }

  late final _popenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('popen');
  late final _popen = _popenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int __srget(
    ffi.Pointer<FILE> arg0,
  ) {
    return ___srget(
      arg0,
    );
  }

  late final ___srgetPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          '__srget');
  late final ___srget =
      ___srgetPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int __svfscanf(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<__va_list_tag> arg2,
  ) {
    return ___svfscanf(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___svfscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>>('__svfscanf');
  late final ___svfscanf = ___svfscanfPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<__va_list_tag>)>();

  int __swbuf(
    int arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return ___swbuf(
      arg0,
      arg1,
    );
  }

  late final ___swbufPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          '__swbuf');
  late final ___swbuf =
      ___swbufPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  void flockfile(
    ffi.Pointer<FILE> arg0,
  ) {
    return _flockfile(
      arg0,
    );
  }

  late final _flockfilePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'flockfile');
  late final _flockfile =
      _flockfilePtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int ftrylockfile(
    ffi.Pointer<FILE> arg0,
  ) {
    return _ftrylockfile(
      arg0,
    );
  }

  late final _ftrylockfilePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ftrylockfile');
  late final _ftrylockfile =
      _ftrylockfilePtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void funlockfile(
    ffi.Pointer<FILE> arg0,
  ) {
    return _funlockfile(
      arg0,
    );
  }

  late final _funlockfilePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'funlockfile');
  late final _funlockfile =
      _funlockfilePtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int getc_unlocked(
    ffi.Pointer<FILE> arg0,
  ) {
    return _getc_unlocked(
      arg0,
    );
  }

  late final _getc_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'getc_unlocked');
  late final _getc_unlocked =
      _getc_unlockedPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getchar_unlocked() {
    return _getchar_unlocked();
  }

  late final _getchar_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getchar_unlocked');
  late final _getchar_unlocked =
      _getchar_unlockedPtr.asFunction<int Function()>();

  int putc_unlocked(
    int arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return _putc_unlocked(
      arg0,
      arg1,
    );
  }

  late final _putc_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putc_unlocked');
  late final _putc_unlocked =
      _putc_unlockedPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putchar_unlocked(
    int arg0,
  ) {
    return _putchar_unlocked(
      arg0,
    );
  }

  late final _putchar_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'putchar_unlocked');
  late final _putchar_unlocked =
      _putchar_unlockedPtr.asFunction<int Function(int)>();

  int getw(
    ffi.Pointer<FILE> arg0,
  ) {
    return _getw(
      arg0,
    );
  }

  late final _getwPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('getw');
  late final _getw = _getwPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int putw(
    int arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return _putw(
      arg0,
      arg1,
    );
  }

  late final _putwPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putw');
  late final _putw =
      _putwPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  ffi.Pointer<ffi.Char> tempnam(
    ffi.Pointer<ffi.Char> __dir,
    ffi.Pointer<ffi.Char> __prefix,
  ) {
    return _tempnam(
      __dir,
      __prefix,
    );
  }

  late final _tempnamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('tempnam');
  late final _tempnam = _tempnamPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int fseeko(
    ffi.Pointer<FILE> __stream,
    int __offset,
    int __whence,
  ) {
    return _fseeko(
      __stream,
      __offset,
      __whence,
    );
  }

  late final _fseekoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, off_t, ffi.Int)>>('fseeko');
  late final _fseeko =
      _fseekoPtr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int ftello(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftello(
      __stream,
    );
  }

  late final _ftelloPtr =
      _lookup<ffi.NativeFunction<off_t Function(ffi.Pointer<FILE>)>>('ftello');
  late final _ftello = _ftelloPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int snprintf(
    ffi.Pointer<ffi.Char> __str,
    int __size,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _snprintf(
      __str,
      __size,
      __format,
    );
  }

  late final _snprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size,
              ffi.Pointer<ffi.Char>)>>('snprintf');
  late final _snprintf = _snprintfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  int vfscanf(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __format,
    ffi.Pointer<__va_list_tag> arg2,
  ) {
    return _vfscanf(
      __stream,
      __format,
      arg2,
    );
  }

  late final _vfscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>>('vfscanf');
  late final _vfscanf = _vfscanfPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<__va_list_tag>)>();

  int vscanf(
    ffi.Pointer<ffi.Char> __format,
    ffi.Pointer<__va_list_tag> arg1,
  ) {
    return _vscanf(
      __format,
      arg1,
    );
  }

  late final _vscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<__va_list_tag>)>>('vscanf');
  late final _vscanf = _vscanfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<__va_list_tag>)>();

  int vsnprintf(
    ffi.Pointer<ffi.Char> __str,
    int __size,
    ffi.Pointer<ffi.Char> __format,
    ffi.Pointer<__va_list_tag> arg3,
  ) {
    return _vsnprintf(
      __str,
      __size,
      __format,
      arg3,
    );
  }

  late final _vsnprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size,
              ffi.Pointer<ffi.Char>, ffi.Pointer<__va_list_tag>)>>('vsnprintf');
  late final _vsnprintf = _vsnprintfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>,
          ffi.Pointer<__va_list_tag>)>();

  int vsscanf(
    ffi.Pointer<ffi.Char> __str,
    ffi.Pointer<ffi.Char> __format,
    ffi.Pointer<__va_list_tag> arg2,
  ) {
    return _vsscanf(
      __str,
      __format,
      arg2,
    );
  }

  late final _vsscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>>('vsscanf');
  late final _vsscanf = _vsscanfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<__va_list_tag>)>();

  int dprintf(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _dprintf(
      arg0,
      arg1,
    );
  }

  late final _dprintfPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>)>>(
      'dprintf');
  late final _dprintf =
      _dprintfPtr.asFunction<int Function(int, ffi.Pointer<ffi.Char>)>();

  int vdprintf(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<__va_list_tag> arg2,
  ) {
    return _vdprintf(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _vdprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>>('vdprintf');
  late final _vdprintf = _vdprintfPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, ffi.Pointer<__va_list_tag>)>();

  int getdelim(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __linep,
    ffi.Pointer<ffi.Size> __linecapp,
    int __delimiter,
    ffi.Pointer<FILE> __stream,
  ) {
    return _getdelim(
      __linep,
      __linecapp,
      __delimiter,
      __stream,
    );
  }

  late final _getdelimPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Size>, ffi.Int, ffi.Pointer<FILE>)>>('getdelim');
  late final _getdelim = _getdelimPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Size>,
          int, ffi.Pointer<FILE>)>();

  int getline(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __linep,
    ffi.Pointer<ffi.Size> __linecapp,
    ffi.Pointer<FILE> __stream,
  ) {
    return _getline(
      __linep,
      __linecapp,
      __stream,
    );
  }

  late final _getlinePtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Size>, ffi.Pointer<FILE>)>>('getline');
  late final _getline = _getlinePtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Size>,
          ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> fmemopen(
    ffi.Pointer<ffi.Void> __buf,
    int __size,
    ffi.Pointer<ffi.Char> __mode,
  ) {
    return _fmemopen(
      __buf,
      __size,
      __mode,
    );
  }

  late final _fmemopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Void>, ffi.Size,
              ffi.Pointer<ffi.Char>)>>('fmemopen');
  late final _fmemopen = _fmemopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> open_memstream(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __bufp,
    ffi.Pointer<ffi.Size> __sizep,
  ) {
    return _open_memstream(
      __bufp,
      __sizep,
    );
  }

  late final _open_memstreamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Size>)>>('open_memstream');
  late final _open_memstream = _open_memstreamPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Size>)>();

  late final ffi.Pointer<ffi.Int> _sys_nerr = _lookup<ffi.Int>('sys_nerr');

  int get sys_nerr => _sys_nerr.value;

  set sys_nerr(int value) => _sys_nerr.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>> _sys_errlist =
      _lookup<ffi.Pointer<ffi.Pointer<ffi.Char>>>('sys_errlist');

  ffi.Pointer<ffi.Pointer<ffi.Char>> get sys_errlist => _sys_errlist.value;

  set sys_errlist(ffi.Pointer<ffi.Pointer<ffi.Char>> value) =>
      _sys_errlist.value = value;

  int asprintf(
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _asprintf(
      arg0,
      arg1,
    );
  }

  late final _asprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>)>>('asprintf');
  late final _asprintf = _asprintfPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> ctermid_r(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _ctermid_r(
      arg0,
    );
  }

  late final _ctermid_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('ctermid_r');
  late final _ctermid_r = _ctermid_rPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> fgetln(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Size> arg1,
  ) {
    return _fgetln(
      arg0,
      arg1,
    );
  }

  late final _fgetlnPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Size>)>>('fgetln');
  late final _fgetln = _fgetlnPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<FILE>, ffi.Pointer<ffi.Size>)>();

  ffi.Pointer<ffi.Char> fmtcheck(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _fmtcheck(
      arg0,
      arg1,
    );
  }

  late final _fmtcheckPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('fmtcheck');
  late final _fmtcheck = _fmtcheckPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int fpurge(
    ffi.Pointer<FILE> arg0,
  ) {
    return _fpurge(
      arg0,
    );
  }

  late final _fpurgePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fpurge');
  late final _fpurge = _fpurgePtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void setbuffer(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _setbuffer(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _setbufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('setbuffer');
  late final _setbuffer = _setbufferPtr.asFunction<
      void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  int setlinebuf(
    ffi.Pointer<FILE> arg0,
  ) {
    return _setlinebuf(
      arg0,
    );
  }

  late final _setlinebufPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'setlinebuf');
  late final _setlinebuf =
      _setlinebufPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int vasprintf(
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<__va_list_tag> arg2,
  ) {
    return _vasprintf(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _vasprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<__va_list_tag>)>>('vasprintf');
  late final _vasprintf = _vasprintfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<__va_list_tag>)>();

  ffi.Pointer<FILE> funopen(
    ffi.Pointer<ffi.Void> arg0,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, ffi.Int)>>
        arg1,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, ffi.Int)>>
        arg2,
    ffi.Pointer<
            ffi.NativeFunction<
                fpos_t Function(ffi.Pointer<ffi.Void>, fpos_t, ffi.Int)>>
        arg3,
    ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>
        arg4,
  ) {
    return _funopen(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _funopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Char>, ffi.Int)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Char>, ffi.Int)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      fpos_t Function(ffi.Pointer<ffi.Void>, fpos_t, ffi.Int)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<ffi.Void>)>>)>>('funopen');
  late final _funopen = _funopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, ffi.Int)>>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, ffi.Int)>>,
          ffi.Pointer<
              ffi.NativeFunction<
                  fpos_t Function(ffi.Pointer<ffi.Void>, fpos_t, ffi.Int)>>,
          ffi.Pointer<
              ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>)>();

  int __sprintf_chk(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ffi.Char> arg3,
  ) {
    return ___sprintf_chk(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final ___sprintf_chkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int, ffi.Size,
              ffi.Pointer<ffi.Char>)>>('__sprintf_chk');
  late final ___sprintf_chk = ___sprintf_chkPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, int, ffi.Pointer<ffi.Char>)>();

  int __snprintf_chk(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    int arg2,
    int arg3,
    ffi.Pointer<ffi.Char> arg4,
  ) {
    return ___snprintf_chk(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final ___snprintf_chkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size, ffi.Int, ffi.Size,
              ffi.Pointer<ffi.Char>)>>('__snprintf_chk');
  late final ___snprintf_chk = ___snprintf_chkPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, int, int, int, ffi.Pointer<ffi.Char>)>();

  int __vsprintf_chk(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ffi.Char> arg3,
    ffi.Pointer<__va_list_tag> arg4,
  ) {
    return ___vsprintf_chk(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final ___vsprintf_chkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Size,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>>('__vsprintf_chk');
  late final ___vsprintf_chk = ___vsprintf_chkPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, int, ffi.Pointer<ffi.Char>,
          ffi.Pointer<__va_list_tag>)>();

  int __vsnprintf_chk(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    int arg2,
    int arg3,
    ffi.Pointer<ffi.Char> arg4,
    ffi.Pointer<__va_list_tag> arg5,
  ) {
    return ___vsnprintf_chk(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final ___vsnprintf_chkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Int,
              ffi.Size,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>>('__vsnprintf_chk');
  late final ___vsnprintf_chk = ___vsnprintf_chkPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, int, int, ffi.Pointer<ffi.Char>,
          ffi.Pointer<__va_list_tag>)>();

  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>> signal(
    int arg0,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>> arg1,
  ) {
    return _signal(
      arg0,
      arg1,
    );
  }

  late final _signalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>> Function(
              ffi.Int,
              ffi.Pointer<
                  ffi.NativeFunction<ffi.Void Function(ffi.Int)>>)>>('signal');
  late final _signal = _signalPtr.asFunction<
      ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>> Function(
          int, ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>)>();

  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>> _sys_signame =
      _lookup<ffi.Pointer<ffi.Pointer<ffi.Char>>>('sys_signame');

  ffi.Pointer<ffi.Pointer<ffi.Char>> get sys_signame => _sys_signame.value;

  set sys_signame(ffi.Pointer<ffi.Pointer<ffi.Char>> value) =>
      _sys_signame.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>> _sys_siglist =
      _lookup<ffi.Pointer<ffi.Pointer<ffi.Char>>>('sys_siglist');

  ffi.Pointer<ffi.Pointer<ffi.Char>> get sys_siglist => _sys_siglist.value;

  set sys_siglist(ffi.Pointer<ffi.Pointer<ffi.Char>> value) =>
      _sys_siglist.value = value;

  int raise(
    int arg0,
  ) {
    return _raise(
      arg0,
    );
  }

  late final _raisePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('raise');
  late final _raise = _raisePtr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>> bsd_signal(
    int arg0,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>> arg1,
  ) {
    return _bsd_signal(
      arg0,
      arg1,
    );
  }

  late final _bsd_signalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>> Function(
              ffi.Int,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Int)>>)>>('bsd_signal');
  late final _bsd_signal = _bsd_signalPtr.asFunction<
      ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>> Function(
          int, ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>)>();

  int kill(
    int arg0,
    int arg1,
  ) {
    return _kill(
      arg0,
      arg1,
    );
  }

  late final _killPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(pid_t, ffi.Int)>>('kill');
  late final _kill = _killPtr.asFunction<int Function(int, int)>();

  int killpg(
    int arg0,
    int arg1,
  ) {
    return _killpg(
      arg0,
      arg1,
    );
  }

  late final _killpgPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(pid_t, ffi.Int)>>('killpg');
  late final _killpg = _killpgPtr.asFunction<int Function(int, int)>();

  int pthread_kill(
    pthread_t arg0,
    int arg1,
  ) {
    return _pthread_kill(
      arg0,
      arg1,
    );
  }

  late final _pthread_killPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(pthread_t, ffi.Int)>>(
          'pthread_kill');
  late final _pthread_kill =
      _pthread_killPtr.asFunction<int Function(pthread_t, int)>();

  int pthread_sigmask(
    int arg0,
    ffi.Pointer<sigset_t> arg1,
    ffi.Pointer<sigset_t> arg2,
  ) {
    return _pthread_sigmask(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _pthread_sigmaskPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<sigset_t>,
              ffi.Pointer<sigset_t>)>>('pthread_sigmask');
  late final _pthread_sigmask = _pthread_sigmaskPtr.asFunction<
      int Function(int, ffi.Pointer<sigset_t>, ffi.Pointer<sigset_t>)>();

  int sigaction1(
    int arg0,
    ffi.Pointer<sigaction> arg1,
    ffi.Pointer<sigaction> arg2,
  ) {
    return _sigaction1(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _sigaction1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<sigaction>,
              ffi.Pointer<sigaction>)>>('sigaction');
  late final _sigaction1 = _sigaction1Ptr.asFunction<
      int Function(int, ffi.Pointer<sigaction>, ffi.Pointer<sigaction>)>();

  int sigaddset(
    ffi.Pointer<sigset_t> arg0,
    int arg1,
  ) {
    return _sigaddset(
      arg0,
      arg1,
    );
  }

  late final _sigaddsetPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<sigset_t>, ffi.Int)>>(
      'sigaddset');
  late final _sigaddset =
      _sigaddsetPtr.asFunction<int Function(ffi.Pointer<sigset_t>, int)>();

  int sigaltstack(
    ffi.Pointer<stack_t> arg0,
    ffi.Pointer<stack_t> arg1,
  ) {
    return _sigaltstack(
      arg0,
      arg1,
    );
  }

  late final _sigaltstackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<stack_t>, ffi.Pointer<stack_t>)>>('sigaltstack');
  late final _sigaltstack = _sigaltstackPtr
      .asFunction<int Function(ffi.Pointer<stack_t>, ffi.Pointer<stack_t>)>();

  int sigdelset(
    ffi.Pointer<sigset_t> arg0,
    int arg1,
  ) {
    return _sigdelset(
      arg0,
      arg1,
    );
  }

  late final _sigdelsetPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<sigset_t>, ffi.Int)>>(
      'sigdelset');
  late final _sigdelset =
      _sigdelsetPtr.asFunction<int Function(ffi.Pointer<sigset_t>, int)>();

  int sigemptyset(
    ffi.Pointer<sigset_t> arg0,
  ) {
    return _sigemptyset(
      arg0,
    );
  }

  late final _sigemptysetPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<sigset_t>)>>(
          'sigemptyset');
  late final _sigemptyset =
      _sigemptysetPtr.asFunction<int Function(ffi.Pointer<sigset_t>)>();

  int sigfillset(
    ffi.Pointer<sigset_t> arg0,
  ) {
    return _sigfillset(
      arg0,
    );
  }

  late final _sigfillsetPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<sigset_t>)>>(
          'sigfillset');
  late final _sigfillset =
      _sigfillsetPtr.asFunction<int Function(ffi.Pointer<sigset_t>)>();

  int sighold(
    int arg0,
  ) {
    return _sighold(
      arg0,
    );
  }

  late final _sigholdPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('sighold');
  late final _sighold = _sigholdPtr.asFunction<int Function(int)>();

  int sigignore(
    int arg0,
  ) {
    return _sigignore(
      arg0,
    );
  }

  late final _sigignorePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('sigignore');
  late final _sigignore = _sigignorePtr.asFunction<int Function(int)>();

  int siginterrupt(
    int arg0,
    int arg1,
  ) {
    return _siginterrupt(
      arg0,
      arg1,
    );
  }

  late final _siginterruptPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>(
          'siginterrupt');
  late final _siginterrupt =
      _siginterruptPtr.asFunction<int Function(int, int)>();

  int sigismember(
    ffi.Pointer<sigset_t> arg0,
    int arg1,
  ) {
    return _sigismember(
      arg0,
      arg1,
    );
  }

  late final _sigismemberPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<sigset_t>, ffi.Int)>>(
      'sigismember');
  late final _sigismember =
      _sigismemberPtr.asFunction<int Function(ffi.Pointer<sigset_t>, int)>();

  int sigpause(
    int arg0,
  ) {
    return _sigpause(
      arg0,
    );
  }

  late final _sigpausePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('sigpause');
  late final _sigpause = _sigpausePtr.asFunction<int Function(int)>();

  int sigpending(
    ffi.Pointer<sigset_t> arg0,
  ) {
    return _sigpending(
      arg0,
    );
  }

  late final _sigpendingPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<sigset_t>)>>(
          'sigpending');
  late final _sigpending =
      _sigpendingPtr.asFunction<int Function(ffi.Pointer<sigset_t>)>();

  int sigprocmask(
    int arg0,
    ffi.Pointer<sigset_t> arg1,
    ffi.Pointer<sigset_t> arg2,
  ) {
    return _sigprocmask(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _sigprocmaskPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<sigset_t>,
              ffi.Pointer<sigset_t>)>>('sigprocmask');
  late final _sigprocmask = _sigprocmaskPtr.asFunction<
      int Function(int, ffi.Pointer<sigset_t>, ffi.Pointer<sigset_t>)>();

  int sigrelse(
    int arg0,
  ) {
    return _sigrelse(
      arg0,
    );
  }

  late final _sigrelsePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('sigrelse');
  late final _sigrelse = _sigrelsePtr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>> sigset(
    int arg0,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>> arg1,
  ) {
    return _sigset(
      arg0,
      arg1,
    );
  }

  late final _sigsetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>> Function(
              ffi.Int,
              ffi.Pointer<
                  ffi.NativeFunction<ffi.Void Function(ffi.Int)>>)>>('sigset');
  late final _sigset = _sigsetPtr.asFunction<
      ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>> Function(
          int, ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>)>();

  int sigsuspend(
    ffi.Pointer<sigset_t> arg0,
  ) {
    return _sigsuspend(
      arg0,
    );
  }

  late final _sigsuspendPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<sigset_t>)>>(
          'sigsuspend');
  late final _sigsuspend =
      _sigsuspendPtr.asFunction<int Function(ffi.Pointer<sigset_t>)>();

  int sigwait(
    ffi.Pointer<sigset_t> arg0,
    ffi.Pointer<ffi.Int> arg1,
  ) {
    return _sigwait(
      arg0,
      arg1,
    );
  }

  late final _sigwaitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<sigset_t>, ffi.Pointer<ffi.Int>)>>('sigwait');
  late final _sigwait = _sigwaitPtr
      .asFunction<int Function(ffi.Pointer<sigset_t>, ffi.Pointer<ffi.Int>)>();

  void psignal(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _psignal(
      arg0,
      arg1,
    );
  }

  late final _psignalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.UnsignedInt, ffi.Pointer<ffi.Char>)>>('psignal');
  late final _psignal =
      _psignalPtr.asFunction<void Function(int, ffi.Pointer<ffi.Char>)>();

  int sigblock(
    int arg0,
  ) {
    return _sigblock(
      arg0,
    );
  }

  late final _sigblockPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('sigblock');
  late final _sigblock = _sigblockPtr.asFunction<int Function(int)>();

  int sigsetmask(
    int arg0,
  ) {
    return _sigsetmask(
      arg0,
    );
  }

  late final _sigsetmaskPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('sigsetmask');
  late final _sigsetmask = _sigsetmaskPtr.asFunction<int Function(int)>();

  int sigvec1(
    int arg0,
    ffi.Pointer<sigvec> arg1,
    ffi.Pointer<sigvec> arg2,
  ) {
    return _sigvec1(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _sigvec1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<sigvec>, ffi.Pointer<sigvec>)>>('sigvec');
  late final _sigvec1 = _sigvec1Ptr.asFunction<
      int Function(int, ffi.Pointer<sigvec>, ffi.Pointer<sigvec>)>();

  int zmq_errno() {
    return _zmq_errno();
  }

  late final _zmq_errnoPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('zmq_errno');
  late final _zmq_errno = _zmq_errnoPtr.asFunction<int Function()>();

  ffi.Pointer<ffi.Char> zmq_strerror(
    int errnum_,
  ) {
    return _zmq_strerror(
      errnum_,
    );
  }

  late final _zmq_strerrorPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'zmq_strerror');
  late final _zmq_strerror =
      _zmq_strerrorPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  void zmq_version(
    ffi.Pointer<ffi.Int> major_,
    ffi.Pointer<ffi.Int> minor_,
    ffi.Pointer<ffi.Int> patch_,
  ) {
    return _zmq_version(
      major_,
      minor_,
      patch_,
    );
  }

  late final _zmq_versionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('zmq_version');
  late final _zmq_version = _zmq_versionPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Void> zmq_ctx_new() {
    return _zmq_ctx_new();
  }

  late final _zmq_ctx_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
          'zmq_ctx_new');
  late final _zmq_ctx_new =
      _zmq_ctx_newPtr.asFunction<ffi.Pointer<ffi.Void> Function()>();

  int zmq_ctx_term(
    ffi.Pointer<ffi.Void> context_,
  ) {
    return _zmq_ctx_term(
      context_,
    );
  }

  late final _zmq_ctx_termPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>(
          'zmq_ctx_term');
  late final _zmq_ctx_term =
      _zmq_ctx_termPtr.asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  int zmq_ctx_shutdown(
    ffi.Pointer<ffi.Void> context_,
  ) {
    return _zmq_ctx_shutdown(
      context_,
    );
  }

  late final _zmq_ctx_shutdownPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>(
          'zmq_ctx_shutdown');
  late final _zmq_ctx_shutdown =
      _zmq_ctx_shutdownPtr.asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  int zmq_ctx_set(
    ffi.Pointer<ffi.Void> context_,
    int option_,
    int optval_,
  ) {
    return _zmq_ctx_set(
      context_,
      option_,
      optval_,
    );
  }

  late final _zmq_ctx_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('zmq_ctx_set');
  late final _zmq_ctx_set = _zmq_ctx_setPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>, int, int)>();

  int zmq_ctx_get(
    ffi.Pointer<ffi.Void> context_,
    int option_,
  ) {
    return _zmq_ctx_get(
      context_,
      option_,
    );
  }

  late final _zmq_ctx_getPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int)>>(
      'zmq_ctx_get');
  late final _zmq_ctx_get =
      _zmq_ctx_getPtr.asFunction<int Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> zmq_init(
    int io_threads_,
  ) {
    return _zmq_init(
      io_threads_,
    );
  }

  late final _zmq_initPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int)>>(
          'zmq_init');
  late final _zmq_init =
      _zmq_initPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  int zmq_term(
    ffi.Pointer<ffi.Void> context_,
  ) {
    return _zmq_term(
      context_,
    );
  }

  late final _zmq_termPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>(
          'zmq_term');
  late final _zmq_term =
      _zmq_termPtr.asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  int zmq_ctx_destroy(
    ffi.Pointer<ffi.Void> context_,
  ) {
    return _zmq_ctx_destroy(
      context_,
    );
  }

  late final _zmq_ctx_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>(
          'zmq_ctx_destroy');
  late final _zmq_ctx_destroy =
      _zmq_ctx_destroyPtr.asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  int zmq_msg_init(
    ffi.Pointer<zmq_msg_t> msg_,
  ) {
    return _zmq_msg_init(
      msg_,
    );
  }

  late final _zmq_msg_initPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<zmq_msg_t>)>>(
          'zmq_msg_init');
  late final _zmq_msg_init =
      _zmq_msg_initPtr.asFunction<int Function(ffi.Pointer<zmq_msg_t>)>();

  int zmq_msg_init_size(
    ffi.Pointer<zmq_msg_t> msg_,
    int size_,
  ) {
    return _zmq_msg_init_size(
      msg_,
      size_,
    );
  }

  late final _zmq_msg_init_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<zmq_msg_t>, ffi.Size)>>('zmq_msg_init_size');
  late final _zmq_msg_init_size = _zmq_msg_init_sizePtr
      .asFunction<int Function(ffi.Pointer<zmq_msg_t>, int)>();

  int zmq_msg_init_data(
    ffi.Pointer<zmq_msg_t> msg_,
    ffi.Pointer<ffi.Void> data_,
    int size_,
    ffi.Pointer<zmq_free_fn> ffn_,
    ffi.Pointer<ffi.Void> hint_,
  ) {
    return _zmq_msg_init_data(
      msg_,
      data_,
      size_,
      ffn_,
      hint_,
    );
  }

  late final _zmq_msg_init_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<zmq_msg_t>,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Pointer<zmq_free_fn>,
              ffi.Pointer<ffi.Void>)>>('zmq_msg_init_data');
  late final _zmq_msg_init_data = _zmq_msg_init_dataPtr.asFunction<
      int Function(ffi.Pointer<zmq_msg_t>, ffi.Pointer<ffi.Void>, int,
          ffi.Pointer<zmq_free_fn>, ffi.Pointer<ffi.Void>)>();

  int zmq_msg_send(
    ffi.Pointer<zmq_msg_t> msg_,
    ffi.Pointer<ffi.Void> s_,
    int flags_,
  ) {
    return _zmq_msg_send(
      msg_,
      s_,
      flags_,
    );
  }

  late final _zmq_msg_sendPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<zmq_msg_t>, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('zmq_msg_send');
  late final _zmq_msg_send = _zmq_msg_sendPtr.asFunction<
      int Function(ffi.Pointer<zmq_msg_t>, ffi.Pointer<ffi.Void>, int)>();

  int zmq_msg_recv(
    ffi.Pointer<zmq_msg_t> msg_,
    ffi.Pointer<ffi.Void> s_,
    int flags_,
  ) {
    return _zmq_msg_recv(
      msg_,
      s_,
      flags_,
    );
  }

  late final _zmq_msg_recvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<zmq_msg_t>, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('zmq_msg_recv');
  late final _zmq_msg_recv = _zmq_msg_recvPtr.asFunction<
      int Function(ffi.Pointer<zmq_msg_t>, ffi.Pointer<ffi.Void>, int)>();

  int zmq_msg_close(
    ffi.Pointer<zmq_msg_t> msg_,
  ) {
    return _zmq_msg_close(
      msg_,
    );
  }

  late final _zmq_msg_closePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<zmq_msg_t>)>>(
          'zmq_msg_close');
  late final _zmq_msg_close =
      _zmq_msg_closePtr.asFunction<int Function(ffi.Pointer<zmq_msg_t>)>();

  int zmq_msg_move(
    ffi.Pointer<zmq_msg_t> dest_,
    ffi.Pointer<zmq_msg_t> src_,
  ) {
    return _zmq_msg_move(
      dest_,
      src_,
    );
  }

  late final _zmq_msg_movePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<zmq_msg_t>, ffi.Pointer<zmq_msg_t>)>>('zmq_msg_move');
  late final _zmq_msg_move = _zmq_msg_movePtr.asFunction<
      int Function(ffi.Pointer<zmq_msg_t>, ffi.Pointer<zmq_msg_t>)>();

  int zmq_msg_copy(
    ffi.Pointer<zmq_msg_t> dest_,
    ffi.Pointer<zmq_msg_t> src_,
  ) {
    return _zmq_msg_copy(
      dest_,
      src_,
    );
  }

  late final _zmq_msg_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<zmq_msg_t>, ffi.Pointer<zmq_msg_t>)>>('zmq_msg_copy');
  late final _zmq_msg_copy = _zmq_msg_copyPtr.asFunction<
      int Function(ffi.Pointer<zmq_msg_t>, ffi.Pointer<zmq_msg_t>)>();

  ffi.Pointer<ffi.Void> zmq_msg_data(
    ffi.Pointer<zmq_msg_t> msg_,
  ) {
    return _zmq_msg_data(
      msg_,
    );
  }

  late final _zmq_msg_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<zmq_msg_t>)>>('zmq_msg_data');
  late final _zmq_msg_data = _zmq_msg_dataPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<zmq_msg_t>)>();

  int zmq_msg_size(
    ffi.Pointer<zmq_msg_t> msg_,
  ) {
    return _zmq_msg_size(
      msg_,
    );
  }

  late final _zmq_msg_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<zmq_msg_t>)>>(
          'zmq_msg_size');
  late final _zmq_msg_size =
      _zmq_msg_sizePtr.asFunction<int Function(ffi.Pointer<zmq_msg_t>)>();

  int zmq_msg_more(
    ffi.Pointer<zmq_msg_t> msg_,
  ) {
    return _zmq_msg_more(
      msg_,
    );
  }

  late final _zmq_msg_morePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<zmq_msg_t>)>>(
          'zmq_msg_more');
  late final _zmq_msg_more =
      _zmq_msg_morePtr.asFunction<int Function(ffi.Pointer<zmq_msg_t>)>();

  int zmq_msg_get(
    ffi.Pointer<zmq_msg_t> msg_,
    int property_,
  ) {
    return _zmq_msg_get(
      msg_,
      property_,
    );
  }

  late final _zmq_msg_getPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<zmq_msg_t>, ffi.Int)>>('zmq_msg_get');
  late final _zmq_msg_get =
      _zmq_msg_getPtr.asFunction<int Function(ffi.Pointer<zmq_msg_t>, int)>();

  int zmq_msg_set(
    ffi.Pointer<zmq_msg_t> msg_,
    int property_,
    int optval_,
  ) {
    return _zmq_msg_set(
      msg_,
      property_,
      optval_,
    );
  }

  late final _zmq_msg_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<zmq_msg_t>, ffi.Int, ffi.Int)>>('zmq_msg_set');
  late final _zmq_msg_set = _zmq_msg_setPtr
      .asFunction<int Function(ffi.Pointer<zmq_msg_t>, int, int)>();

  ffi.Pointer<ffi.Char> zmq_msg_gets(
    ffi.Pointer<zmq_msg_t> msg_,
    ffi.Pointer<ffi.Char> property_,
  ) {
    return _zmq_msg_gets(
      msg_,
      property_,
    );
  }

  late final _zmq_msg_getsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<zmq_msg_t>, ffi.Pointer<ffi.Char>)>>('zmq_msg_gets');
  late final _zmq_msg_gets = _zmq_msg_getsPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<zmq_msg_t>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Void> zmq_socket(
    ffi.Pointer<ffi.Void> arg0,
    int type_,
  ) {
    return _zmq_socket(
      arg0,
      type_,
    );
  }

  late final _zmq_socketPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int)>>('zmq_socket');
  late final _zmq_socket = _zmq_socketPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  int zmq_close(
    ffi.Pointer<ffi.Void> s_,
  ) {
    return _zmq_close(
      s_,
    );
  }

  late final _zmq_closePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>(
          'zmq_close');
  late final _zmq_close =
      _zmq_closePtr.asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  int zmq_setsockopt(
    ffi.Pointer<ffi.Void> s_,
    int option_,
    ffi.Pointer<ffi.Void> optval_,
    int optvallen_,
  ) {
    return _zmq_setsockopt(
      s_,
      option_,
      optval_,
      optvallen_,
    );
  }

  late final _zmq_setsockoptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int,
              ffi.Pointer<ffi.Void>, ffi.Size)>>('zmq_setsockopt');
  late final _zmq_setsockopt = _zmq_setsockoptPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>, int)>();

  int zmq_getsockopt(
    ffi.Pointer<ffi.Void> s_,
    int option_,
    ffi.Pointer<ffi.Void> optval_,
    ffi.Pointer<ffi.Size> optvallen_,
  ) {
    return _zmq_getsockopt(
      s_,
      option_,
      optval_,
      optvallen_,
    );
  }

  late final _zmq_getsockoptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Size>)>>('zmq_getsockopt');
  late final _zmq_getsockopt = _zmq_getsockoptPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Size>)>();

  int zmq_bind(
    ffi.Pointer<ffi.Void> s_,
    ffi.Pointer<ffi.Char> addr_,
  ) {
    return _zmq_bind(
      s_,
      addr_,
    );
  }

  late final _zmq_bindPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>>('zmq_bind');
  late final _zmq_bind = _zmq_bindPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>();

  int zmq_connect(
    ffi.Pointer<ffi.Void> s_,
    ffi.Pointer<ffi.Char> addr_,
  ) {
    return _zmq_connect(
      s_,
      addr_,
    );
  }

  late final _zmq_connectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>>('zmq_connect');
  late final _zmq_connect = _zmq_connectPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>();

  int zmq_unbind(
    ffi.Pointer<ffi.Void> s_,
    ffi.Pointer<ffi.Char> addr_,
  ) {
    return _zmq_unbind(
      s_,
      addr_,
    );
  }

  late final _zmq_unbindPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>>('zmq_unbind');
  late final _zmq_unbind = _zmq_unbindPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>();

  int zmq_disconnect(
    ffi.Pointer<ffi.Void> s_,
    ffi.Pointer<ffi.Char> addr_,
  ) {
    return _zmq_disconnect(
      s_,
      addr_,
    );
  }

  late final _zmq_disconnectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>>('zmq_disconnect');
  late final _zmq_disconnect = _zmq_disconnectPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>();

  int zmq_send(
    ffi.Pointer<ffi.Void> s_,
    ffi.Pointer<ffi.Void> buf_,
    int len_,
    int flags_,
  ) {
    return _zmq_send(
      s_,
      buf_,
      len_,
      flags_,
    );
  }

  late final _zmq_sendPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Size, ffi.Int)>>('zmq_send');
  late final _zmq_send = _zmq_sendPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  int zmq_send_const(
    ffi.Pointer<ffi.Void> s_,
    ffi.Pointer<ffi.Void> buf_,
    int len_,
    int flags_,
  ) {
    return _zmq_send_const(
      s_,
      buf_,
      len_,
      flags_,
    );
  }

  late final _zmq_send_constPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Size, ffi.Int)>>('zmq_send_const');
  late final _zmq_send_const = _zmq_send_constPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  int zmq_recv(
    ffi.Pointer<ffi.Void> s_,
    ffi.Pointer<ffi.Void> buf_,
    int len_,
    int flags_,
  ) {
    return _zmq_recv(
      s_,
      buf_,
      len_,
      flags_,
    );
  }

  late final _zmq_recvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Size, ffi.Int)>>('zmq_recv');
  late final _zmq_recv = _zmq_recvPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  int zmq_socket_monitor(
    ffi.Pointer<ffi.Void> s_,
    ffi.Pointer<ffi.Char> addr_,
    int events_,
  ) {
    return _zmq_socket_monitor(
      s_,
      addr_,
      events_,
    );
  }

  late final _zmq_socket_monitorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('zmq_socket_monitor');
  late final _zmq_socket_monitor = _zmq_socket_monitorPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, int)>();

  int zmq_poll(
    ffi.Pointer<zmq_pollitem_t> items_,
    int nitems_,
    int timeout_,
  ) {
    return _zmq_poll(
      items_,
      nitems_,
      timeout_,
    );
  }

  late final _zmq_pollPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<zmq_pollitem_t>, ffi.Int, ffi.Long)>>('zmq_poll');
  late final _zmq_poll = _zmq_pollPtr
      .asFunction<int Function(ffi.Pointer<zmq_pollitem_t>, int, int)>();

  /// /
  int zmq_proxy(
    ffi.Pointer<ffi.Void> frontend_,
    ffi.Pointer<ffi.Void> backend_,
    ffi.Pointer<ffi.Void> capture_,
  ) {
    return _zmq_proxy(
      frontend_,
      backend_,
      capture_,
    );
  }

  late final _zmq_proxyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>>('zmq_proxy');
  late final _zmq_proxy = _zmq_proxyPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>)>();

  int zmq_proxy_steerable(
    ffi.Pointer<ffi.Void> frontend_,
    ffi.Pointer<ffi.Void> backend_,
    ffi.Pointer<ffi.Void> capture_,
    ffi.Pointer<ffi.Void> control_,
  ) {
    return _zmq_proxy_steerable(
      frontend_,
      backend_,
      capture_,
      control_,
    );
  }

  late final _zmq_proxy_steerablePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>>('zmq_proxy_steerable');
  late final _zmq_proxy_steerable = _zmq_proxy_steerablePtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  int zmq_has(
    ffi.Pointer<ffi.Char> capability_,
  ) {
    return _zmq_has(
      capability_,
    );
  }

  late final _zmq_hasPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'zmq_has');
  late final _zmq_has =
      _zmq_hasPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int zmq_device(
    int type_,
    ffi.Pointer<ffi.Void> frontend_,
    ffi.Pointer<ffi.Void> backend_,
  ) {
    return _zmq_device(
      type_,
      frontend_,
      backend_,
    );
  }

  late final _zmq_devicePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>>('zmq_device');
  late final _zmq_device = _zmq_devicePtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  int zmq_sendmsg(
    ffi.Pointer<ffi.Void> s_,
    ffi.Pointer<zmq_msg_t> msg_,
    int flags_,
  ) {
    return _zmq_sendmsg(
      s_,
      msg_,
      flags_,
    );
  }

  late final _zmq_sendmsgPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<zmq_msg_t>,
              ffi.Int)>>('zmq_sendmsg');
  late final _zmq_sendmsg = _zmq_sendmsgPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<zmq_msg_t>, int)>();

  int zmq_recvmsg(
    ffi.Pointer<ffi.Void> s_,
    ffi.Pointer<zmq_msg_t> msg_,
    int flags_,
  ) {
    return _zmq_recvmsg(
      s_,
      msg_,
      flags_,
    );
  }

  late final _zmq_recvmsgPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<zmq_msg_t>,
              ffi.Int)>>('zmq_recvmsg');
  late final _zmq_recvmsg = _zmq_recvmsgPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<zmq_msg_t>, int)>();

  int zmq_sendiov(
    ffi.Pointer<ffi.Void> s_,
    ffi.Pointer<iovec> iov_,
    int count_,
    int flags_,
  ) {
    return _zmq_sendiov(
      s_,
      iov_,
      count_,
      flags_,
    );
  }

  late final _zmq_sendiovPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<iovec>, ffi.Size,
              ffi.Int)>>('zmq_sendiov');
  late final _zmq_sendiov = _zmq_sendiovPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<iovec>, int, int)>();

  int zmq_recviov(
    ffi.Pointer<ffi.Void> s_,
    ffi.Pointer<iovec> iov_,
    ffi.Pointer<ffi.Size> count_,
    int flags_,
  ) {
    return _zmq_recviov(
      s_,
      iov_,
      count_,
      flags_,
    );
  }

  late final _zmq_recviovPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<iovec>,
              ffi.Pointer<ffi.Size>, ffi.Int)>>('zmq_recviov');
  late final _zmq_recviov = _zmq_recviovPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<iovec>,
          ffi.Pointer<ffi.Size>, int)>();

  /// /
  ffi.Pointer<ffi.Char> zmq_z85_encode(
    ffi.Pointer<ffi.Char> dest_,
    ffi.Pointer<ffi.Uint8> data_,
    int size_,
  ) {
    return _zmq_z85_encode(
      dest_,
      data_,
      size_,
    );
  }

  late final _zmq_z85_encodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Uint8>, ffi.Size)>>('zmq_z85_encode');
  late final _zmq_z85_encode = _zmq_z85_encodePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Uint8>, int)>();

  ffi.Pointer<ffi.Uint8> zmq_z85_decode(
    ffi.Pointer<ffi.Uint8> dest_,
    ffi.Pointer<ffi.Char> string_,
  ) {
    return _zmq_z85_decode(
      dest_,
      string_,
    );
  }

  late final _zmq_z85_decodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Uint8> Function(ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Char>)>>('zmq_z85_decode');
  late final _zmq_z85_decode = _zmq_z85_decodePtr.asFunction<
      ffi.Pointer<ffi.Uint8> Function(
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Char>)>();

  int zmq_curve_keypair(
    ffi.Pointer<ffi.Char> z85_public_key_,
    ffi.Pointer<ffi.Char> z85_secret_key_,
  ) {
    return _zmq_curve_keypair(
      z85_public_key_,
      z85_secret_key_,
    );
  }

  late final _zmq_curve_keypairPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('zmq_curve_keypair');
  late final _zmq_curve_keypair = _zmq_curve_keypairPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int zmq_curve_public(
    ffi.Pointer<ffi.Char> z85_public_key_,
    ffi.Pointer<ffi.Char> z85_secret_key_,
  ) {
    return _zmq_curve_public(
      z85_public_key_,
      z85_secret_key_,
    );
  }

  late final _zmq_curve_publicPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('zmq_curve_public');
  late final _zmq_curve_public = _zmq_curve_publicPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  /// /
  ffi.Pointer<ffi.Void> zmq_atomic_counter_new() {
    return _zmq_atomic_counter_new();
  }

  late final _zmq_atomic_counter_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
          'zmq_atomic_counter_new');
  late final _zmq_atomic_counter_new =
      _zmq_atomic_counter_newPtr.asFunction<ffi.Pointer<ffi.Void> Function()>();

  void zmq_atomic_counter_set(
    ffi.Pointer<ffi.Void> counter_,
    int value_,
  ) {
    return _zmq_atomic_counter_set(
      counter_,
      value_,
    );
  }

  late final _zmq_atomic_counter_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, ffi.Int)>>('zmq_atomic_counter_set');
  late final _zmq_atomic_counter_set = _zmq_atomic_counter_setPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  int zmq_atomic_counter_inc(
    ffi.Pointer<ffi.Void> counter_,
  ) {
    return _zmq_atomic_counter_inc(
      counter_,
    );
  }

  late final _zmq_atomic_counter_incPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>(
          'zmq_atomic_counter_inc');
  late final _zmq_atomic_counter_inc = _zmq_atomic_counter_incPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  int zmq_atomic_counter_dec(
    ffi.Pointer<ffi.Void> counter_,
  ) {
    return _zmq_atomic_counter_dec(
      counter_,
    );
  }

  late final _zmq_atomic_counter_decPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>(
          'zmq_atomic_counter_dec');
  late final _zmq_atomic_counter_dec = _zmq_atomic_counter_decPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  int zmq_atomic_counter_value(
    ffi.Pointer<ffi.Void> counter_,
  ) {
    return _zmq_atomic_counter_value(
      counter_,
    );
  }

  late final _zmq_atomic_counter_valuePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>(
          'zmq_atomic_counter_value');
  late final _zmq_atomic_counter_value = _zmq_atomic_counter_valuePtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  void zmq_atomic_counter_destroy(
    ffi.Pointer<ffi.Pointer<ffi.Void>> counter_p_,
  ) {
    return _zmq_atomic_counter_destroy(
      counter_p_,
    );
  }

  late final _zmq_atomic_counter_destroyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Pointer<ffi.Void>>)>>(
      'zmq_atomic_counter_destroy');
  late final _zmq_atomic_counter_destroy = _zmq_atomic_counter_destroyPtr
      .asFunction<void Function(ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  ffi.Pointer<ffi.Void> zmq_timers_new() {
    return _zmq_timers_new();
  }

  late final _zmq_timers_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
          'zmq_timers_new');
  late final _zmq_timers_new =
      _zmq_timers_newPtr.asFunction<ffi.Pointer<ffi.Void> Function()>();

  int zmq_timers_destroy(
    ffi.Pointer<ffi.Pointer<ffi.Void>> timers_p,
  ) {
    return _zmq_timers_destroy(
      timers_p,
    );
  }

  late final _zmq_timers_destroyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>>('zmq_timers_destroy');
  late final _zmq_timers_destroy = _zmq_timers_destroyPtr
      .asFunction<int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  int zmq_timers_add(
    ffi.Pointer<ffi.Void> timers,
    int interval,
    ffi.Pointer<zmq_timer_fn> handler,
    ffi.Pointer<ffi.Void> arg,
  ) {
    return _zmq_timers_add(
      timers,
      interval,
      handler,
      arg,
    );
  }

  late final _zmq_timers_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Pointer<zmq_timer_fn>,
              ffi.Pointer<ffi.Void>)>>('zmq_timers_add');
  late final _zmq_timers_add = _zmq_timers_addPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, ffi.Pointer<zmq_timer_fn>,
          ffi.Pointer<ffi.Void>)>();

  int zmq_timers_cancel(
    ffi.Pointer<ffi.Void> timers,
    int timer_id,
  ) {
    return _zmq_timers_cancel(
      timers,
      timer_id,
    );
  }

  late final _zmq_timers_cancelPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int)>>(
      'zmq_timers_cancel');
  late final _zmq_timers_cancel = _zmq_timers_cancelPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>, int)>();

  int zmq_timers_set_interval(
    ffi.Pointer<ffi.Void> timers,
    int timer_id,
    int interval,
  ) {
    return _zmq_timers_set_interval(
      timers,
      timer_id,
      interval,
    );
  }

  late final _zmq_timers_set_intervalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int,
              ffi.Size)>>('zmq_timers_set_interval');
  late final _zmq_timers_set_interval = _zmq_timers_set_intervalPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>, int, int)>();

  int zmq_timers_reset(
    ffi.Pointer<ffi.Void> timers,
    int timer_id,
  ) {
    return _zmq_timers_reset(
      timers,
      timer_id,
    );
  }

  late final _zmq_timers_resetPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int)>>(
      'zmq_timers_reset');
  late final _zmq_timers_reset = _zmq_timers_resetPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>, int)>();

  int zmq_timers_timeout(
    ffi.Pointer<ffi.Void> timers,
  ) {
    return _zmq_timers_timeout(
      timers,
    );
  }

  late final _zmq_timers_timeoutPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Void>)>>(
          'zmq_timers_timeout');
  late final _zmq_timers_timeout =
      _zmq_timers_timeoutPtr.asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  int zmq_timers_execute(
    ffi.Pointer<ffi.Void> timers,
  ) {
    return _zmq_timers_execute(
      timers,
    );
  }

  late final _zmq_timers_executePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>(
          'zmq_timers_execute');
  late final _zmq_timers_execute =
      _zmq_timers_executePtr.asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// /
  ffi.Pointer<ffi.Void> zmq_stopwatch_start() {
    return _zmq_stopwatch_start();
  }

  late final _zmq_stopwatch_startPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
          'zmq_stopwatch_start');
  late final _zmq_stopwatch_start =
      _zmq_stopwatch_startPtr.asFunction<ffi.Pointer<ffi.Void> Function()>();

  int zmq_stopwatch_intermediate(
    ffi.Pointer<ffi.Void> watch_,
  ) {
    return _zmq_stopwatch_intermediate(
      watch_,
    );
  }

  late final _zmq_stopwatch_intermediatePtr = _lookup<
          ffi.NativeFunction<ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>)>>(
      'zmq_stopwatch_intermediate');
  late final _zmq_stopwatch_intermediate = _zmq_stopwatch_intermediatePtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  int zmq_stopwatch_stop(
    ffi.Pointer<ffi.Void> watch_,
  ) {
    return _zmq_stopwatch_stop(
      watch_,
    );
  }

  late final _zmq_stopwatch_stopPtr = _lookup<
          ffi.NativeFunction<ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>)>>(
      'zmq_stopwatch_stop');
  late final _zmq_stopwatch_stop =
      _zmq_stopwatch_stopPtr.asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  void zmq_sleep(
    int seconds_,
  ) {
    return _zmq_sleep(
      seconds_,
    );
  }

  late final _zmq_sleepPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('zmq_sleep');
  late final _zmq_sleep = _zmq_sleepPtr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Void> zmq_threadstart(
    ffi.Pointer<zmq_thread_fn> func_,
    ffi.Pointer<ffi.Void> arg_,
  ) {
    return _zmq_threadstart(
      func_,
      arg_,
    );
  }

  late final _zmq_threadstartPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<zmq_thread_fn>,
              ffi.Pointer<ffi.Void>)>>('zmq_threadstart');
  late final _zmq_threadstart = _zmq_threadstartPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<zmq_thread_fn>, ffi.Pointer<ffi.Void>)>();

  void zmq_threadclose(
    ffi.Pointer<ffi.Void> thread_,
  ) {
    return _zmq_threadclose(
      thread_,
    );
  }

  late final _zmq_threadclosePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'zmq_threadclose');
  late final _zmq_threadclose =
      _zmq_threadclosePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();
}

final class __mbstate_t extends ffi.Union {
  @ffi.Array.multi([128])
  external ffi.Array<ffi.Char> __mbstate8;

  @ffi.LongLong()
  external int _mbstateL;
}

final class __darwin_pthread_handler_rec extends ffi.Struct {
  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      __routine;

  external ffi.Pointer<ffi.Void> __arg;

  external ffi.Pointer<__darwin_pthread_handler_rec> __next;
}

final class _opaque_pthread_attr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([56])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_cond_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([40])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_condattr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_mutex_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([56])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_mutexattr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_once_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_rwlock_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([192])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_rwlockattr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([16])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  external ffi.Pointer<__darwin_pthread_handler_rec> __cleanup_stack;

  @ffi.Array.multi([8176])
  external ffi.Array<ffi.Char> __opaque;
}

final class __sbuf extends ffi.Struct {
  external ffi.Pointer<ffi.UnsignedChar> _base;

  @ffi.Int()
  external int _size;
}

final class __sFILEX extends ffi.Opaque {}

final class __sFILE extends ffi.Struct {
  external ffi.Pointer<ffi.UnsignedChar> _p;

  @ffi.Int()
  external int _r;

  @ffi.Int()
  external int _w;

  @ffi.Short()
  external int _flags;

  @ffi.Short()
  external int _file;

  external __sbuf _bf;

  @ffi.Int()
  external int _lbfsize;

  external ffi.Pointer<ffi.Void> _cookie;

  external ffi
          .Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>
      _close;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, ffi.Int)>> _read;

  external ffi.Pointer<
      ffi.NativeFunction<
          fpos_t Function(ffi.Pointer<ffi.Void>, fpos_t, ffi.Int)>> _seek;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, ffi.Int)>> _write;

  external __sbuf _ub;

  external ffi.Pointer<__sFILEX> _extra;

  @ffi.Int()
  external int _ur;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.UnsignedChar> _ubuf;

  @ffi.Array.multi([1])
  external ffi.Array<ffi.UnsignedChar> _nbuf;

  external __sbuf _lb;

  @ffi.Int()
  external int _blksize;

  @fpos_t()
  external int _offset;
}

typedef fpos_t = __darwin_off_t;
typedef __darwin_off_t = __int64_t;
typedef __int64_t = ffi.LongLong;
typedef FILE = __sFILE;

final class __va_list_tag extends ffi.Struct {
  @ffi.UnsignedInt()
  external int gp_offset;

  @ffi.UnsignedInt()
  external int fp_offset;

  external ffi.Pointer<ffi.Void> overflow_arg_area;

  external ffi.Pointer<ffi.Void> reg_save_area;
}

typedef off_t = __darwin_off_t;
typedef ssize_t = __darwin_ssize_t;
typedef __darwin_ssize_t = ffi.Long;

final class __darwin_i386_thread_state extends ffi.Struct {
  @ffi.UnsignedInt()
  external int __eax;

  @ffi.UnsignedInt()
  external int __ebx;

  @ffi.UnsignedInt()
  external int __ecx;

  @ffi.UnsignedInt()
  external int __edx;

  @ffi.UnsignedInt()
  external int __edi;

  @ffi.UnsignedInt()
  external int __esi;

  @ffi.UnsignedInt()
  external int __ebp;

  @ffi.UnsignedInt()
  external int __esp;

  @ffi.UnsignedInt()
  external int __ss;

  @ffi.UnsignedInt()
  external int __eflags;

  @ffi.UnsignedInt()
  external int __eip;

  @ffi.UnsignedInt()
  external int __cs;

  @ffi.UnsignedInt()
  external int __ds;

  @ffi.UnsignedInt()
  external int __es;

  @ffi.UnsignedInt()
  external int __fs;

  @ffi.UnsignedInt()
  external int __gs;
}

final class __darwin_fp_control extends ffi.Opaque {}

final class __darwin_fp_status extends ffi.Opaque {}

final class __darwin_mmst_reg extends ffi.Struct {
  @ffi.Array.multi([10])
  external ffi.Array<ffi.Char> __mmst_reg;

  @ffi.Array.multi([6])
  external ffi.Array<ffi.Char> __mmst_rsrv;
}

final class __darwin_xmm_reg extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Char> __xmm_reg;
}

final class __darwin_ymm_reg extends ffi.Struct {
  @ffi.Array.multi([32])
  external ffi.Array<ffi.Char> __ymm_reg;
}

final class __darwin_zmm_reg extends ffi.Struct {
  @ffi.Array.multi([64])
  external ffi.Array<ffi.Char> __zmm_reg;
}

final class __darwin_opmask_reg extends ffi.Struct {
  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> __opmask_reg;
}

final class __darwin_i386_float_state extends ffi.Opaque {}

final class __darwin_i386_avx_state extends ffi.Opaque {}

final class __darwin_i386_avx512_state extends ffi.Opaque {}

final class __darwin_i386_exception_state extends ffi.Struct {
  @__uint16_t()
  external int __trapno;

  @__uint16_t()
  external int __cpu;

  @__uint32_t()
  external int __err;

  @__uint32_t()
  external int __faultvaddr;
}

typedef __uint16_t = ffi.UnsignedShort;
typedef __uint32_t = ffi.UnsignedInt;

final class __darwin_x86_debug_state32 extends ffi.Struct {
  @ffi.UnsignedInt()
  external int __dr0;

  @ffi.UnsignedInt()
  external int __dr1;

  @ffi.UnsignedInt()
  external int __dr2;

  @ffi.UnsignedInt()
  external int __dr3;

  @ffi.UnsignedInt()
  external int __dr4;

  @ffi.UnsignedInt()
  external int __dr5;

  @ffi.UnsignedInt()
  external int __dr6;

  @ffi.UnsignedInt()
  external int __dr7;
}

final class __x86_instruction_state extends ffi.Struct {
  @ffi.Int()
  external int __insn_stream_valid_bytes;

  @ffi.Int()
  external int __insn_offset;

  @ffi.Int()
  external int __out_of_synch;

  @ffi.Array.multi([2380])
  external ffi.Array<__uint8_t> __insn_bytes;

  @ffi.Array.multi([64])
  external ffi.Array<__uint8_t> __insn_cacheline;
}

typedef __uint8_t = ffi.UnsignedChar;

final class __last_branch_record extends ffi.Opaque {}

final class __last_branch_state extends ffi.Opaque {}

final class __x86_pagein_state extends ffi.Struct {
  @ffi.Int()
  external int __pagein_error;
}

final class __darwin_x86_thread_state64 extends ffi.Struct {
  @__uint64_t()
  external int __rax;

  @__uint64_t()
  external int __rbx;

  @__uint64_t()
  external int __rcx;

  @__uint64_t()
  external int __rdx;

  @__uint64_t()
  external int __rdi;

  @__uint64_t()
  external int __rsi;

  @__uint64_t()
  external int __rbp;

  @__uint64_t()
  external int __rsp;

  @__uint64_t()
  external int __r8;

  @__uint64_t()
  external int __r9;

  @__uint64_t()
  external int __r10;

  @__uint64_t()
  external int __r11;

  @__uint64_t()
  external int __r12;

  @__uint64_t()
  external int __r13;

  @__uint64_t()
  external int __r14;

  @__uint64_t()
  external int __r15;

  @__uint64_t()
  external int __rip;

  @__uint64_t()
  external int __rflags;

  @__uint64_t()
  external int __cs;

  @__uint64_t()
  external int __fs;

  @__uint64_t()
  external int __gs;
}

typedef __uint64_t = ffi.UnsignedLongLong;

final class __darwin_x86_thread_full_state64 extends ffi.Struct {
  external __darwin_x86_thread_state64 __ss64;

  @__uint64_t()
  external int __ds;

  @__uint64_t()
  external int __es;

  @__uint64_t()
  external int __ss;

  @__uint64_t()
  external int __gsbase;
}

final class __darwin_x86_float_state64 extends ffi.Opaque {}

final class __darwin_x86_avx_state64 extends ffi.Opaque {}

final class __darwin_x86_avx512_state64 extends ffi.Opaque {}

final class __darwin_x86_exception_state64 extends ffi.Struct {
  @__uint16_t()
  external int __trapno;

  @__uint16_t()
  external int __cpu;

  @__uint32_t()
  external int __err;

  @__uint64_t()
  external int __faultvaddr;
}

final class __darwin_x86_debug_state64 extends ffi.Struct {
  @__uint64_t()
  external int __dr0;

  @__uint64_t()
  external int __dr1;

  @__uint64_t()
  external int __dr2;

  @__uint64_t()
  external int __dr3;

  @__uint64_t()
  external int __dr4;

  @__uint64_t()
  external int __dr5;

  @__uint64_t()
  external int __dr6;

  @__uint64_t()
  external int __dr7;
}

final class __darwin_x86_cpmu_state64 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<__uint64_t> __ctrs;
}

final class __darwin_mcontext32 extends ffi.Opaque {}

final class __darwin_mcontext_avx32 extends ffi.Opaque {}

final class __darwin_mcontext_avx512_32 extends ffi.Opaque {}

final class __darwin_mcontext64 extends ffi.Opaque {}

final class __darwin_mcontext64_full extends ffi.Opaque {}

final class __darwin_mcontext_avx64 extends ffi.Opaque {}

final class __darwin_mcontext_avx64_full extends ffi.Opaque {}

final class __darwin_mcontext_avx512_64 extends ffi.Opaque {}

final class __darwin_mcontext_avx512_64_full extends ffi.Opaque {}

final class __darwin_sigaltstack extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ss_sp;

  @__darwin_size_t()
  external int ss_size;

  @ffi.Int()
  external int ss_flags;
}

typedef __darwin_size_t = ffi.UnsignedLong;

final class __darwin_ucontext extends ffi.Struct {
  @ffi.Int()
  external int uc_onstack;

  @__darwin_sigset_t()
  external int uc_sigmask;

  external __darwin_sigaltstack uc_stack;

  external ffi.Pointer<__darwin_ucontext> uc_link;

  @__darwin_size_t()
  external int uc_mcsize;

  external ffi.Pointer<__darwin_mcontext64> uc_mcontext;
}

typedef __darwin_sigset_t = __uint32_t;

final class sigval extends ffi.Union {
  @ffi.Int()
  external int sival_int;

  external ffi.Pointer<ffi.Void> sival_ptr;
}

final class sigevent extends ffi.Struct {
  @ffi.Int()
  external int sigev_notify;

  @ffi.Int()
  external int sigev_signo;

  external sigval sigev_value;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(sigval)>>
      sigev_notify_function;

  external ffi.Pointer<pthread_attr_t> sigev_notify_attributes;
}

typedef pthread_attr_t = __darwin_pthread_attr_t;
typedef __darwin_pthread_attr_t = _opaque_pthread_attr_t;

final class __siginfo extends ffi.Struct {
  @ffi.Int()
  external int si_signo;

  @ffi.Int()
  external int si_errno;

  @ffi.Int()
  external int si_code;

  @pid_t()
  external int si_pid;

  @uid_t()
  external int si_uid;

  @ffi.Int()
  external int si_status;

  external ffi.Pointer<ffi.Void> si_addr;

  external sigval si_value;

  @ffi.Long()
  external int si_band;

  @ffi.Array.multi([7])
  external ffi.Array<ffi.UnsignedLong> __pad;
}

typedef pid_t = __darwin_pid_t;
typedef __darwin_pid_t = __int32_t;
typedef __int32_t = ffi.Int;
typedef uid_t = __darwin_uid_t;
typedef __darwin_uid_t = __uint32_t;

final class __sigaction_u extends ffi.Union {
  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>
      __sa_handler;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int, ffi.Pointer<__siginfo>, ffi.Pointer<ffi.Void>)>>
      __sa_sigaction;
}

final class __sigaction extends ffi.Struct {
  external __sigaction_u __sigaction_u1;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<siginfo_t>, ffi.Pointer<ffi.Void>)>> sa_tramp;

  @sigset_t()
  external int sa_mask;

  @ffi.Int()
  external int sa_flags;
}

typedef siginfo_t = __siginfo;
typedef sigset_t = __darwin_sigset_t;

final class sigaction extends ffi.Struct {
  external __sigaction_u __sigaction_u1;

  @sigset_t()
  external int sa_mask;

  @ffi.Int()
  external int sa_flags;
}

final class sigvec extends ffi.Struct {
  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>
      sv_handler;

  @ffi.Int()
  external int sv_mask;

  @ffi.Int()
  external int sv_flags;
}

final class sigstack extends ffi.Struct {
  external ffi.Pointer<ffi.Char> ss_sp;

  @ffi.Int()
  external int ss_onstack;
}

typedef pthread_t = __darwin_pthread_t;
typedef __darwin_pthread_t = ffi.Pointer<_opaque_pthread_t>;
typedef stack_t = __darwin_sigaltstack;

/// /
final class zmq_msg_t extends ffi.Struct {
  @ffi.Array.multi([64])
  external ffi.Array<ffi.UnsignedChar> _;
}

typedef zmq_free_fn = ffi.NativeFunction<
    ffi.Void Function(
        ffi.Pointer<ffi.Void> data_, ffi.Pointer<ffi.Void> hint_)>;

final class zmq_pollitem_t extends ffi.Struct {
  external ffi.Pointer<ffi.Void> socket;

  @zmq_fd_t()
  external int fd;

  @ffi.Short()
  external int events;

  @ffi.Short()
  external int revents;
}

typedef zmq_fd_t = ffi.Int;

final class iovec extends ffi.Opaque {}

typedef zmq_timer_fn = ffi.NativeFunction<
    ffi.Void Function(ffi.Int timer_id, ffi.Pointer<ffi.Void> arg)>;
typedef zmq_thread_fn
    = ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>;

const int ZMQ_VERSION_MAJOR = 4;

const int ZMQ_VERSION_MINOR = 3;

const int ZMQ_VERSION_PATCH = 5;

const int ZMQ_VERSION = 40305;

const int __DARWIN_ONLY_64_BIT_INO_T = 0;

const int __DARWIN_ONLY_UNIX_CONFORMANCE = 1;

const int __DARWIN_ONLY_VERS_1050 = 0;

const int __DARWIN_UNIX03 = 1;

const int __DARWIN_64_BIT_INO_T = 1;

const int __DARWIN_VERS_1050 = 1;

const int __DARWIN_NON_CANCELABLE = 0;

const String __DARWIN_SUF_64_BIT_INO_T = '\$INODE64';

const String __DARWIN_SUF_1050 = '\$1050';

const String __DARWIN_SUF_EXTSN = '\$DARWIN_EXTSN';

const int __DARWIN_C_ANSI = 4096;

const int __DARWIN_C_FULL = 900000;

const int __DARWIN_C_LEVEL = 900000;

const int __STDC_WANT_LIB_EXT1__ = 1;

const int __DARWIN_NO_LONG_LONG = 0;

const int _DARWIN_FEATURE_64_BIT_INODE = 1;

const int _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE = 1;

const int _DARWIN_FEATURE_UNIX_CONFORMANCE = 3;

const int __has_ptrcheck = 0;

const int EPERM = 1;

const int ENOENT = 2;

const int ESRCH = 3;

const int EINTR = 4;

const int EIO = 5;

const int ENXIO = 6;

const int E2BIG = 7;

const int ENOEXEC = 8;

const int EBADF = 9;

const int ECHILD = 10;

const int EDEADLK = 11;

const int ENOMEM = 12;

const int EACCES = 13;

const int EFAULT = 14;

const int ENOTBLK = 15;

const int EBUSY = 16;

const int EEXIST = 17;

const int EXDEV = 18;

const int ENODEV = 19;

const int ENOTDIR = 20;

const int EISDIR = 21;

const int EINVAL = 22;

const int ENFILE = 23;

const int EMFILE = 24;

const int ENOTTY = 25;

const int ETXTBSY = 26;

const int EFBIG = 27;

const int ENOSPC = 28;

const int ESPIPE = 29;

const int EROFS = 30;

const int EMLINK = 31;

const int EPIPE = 32;

const int EDOM = 33;

const int ERANGE = 34;

const int EAGAIN = 35;

const int EWOULDBLOCK = 35;

const int EINPROGRESS = 36;

const int EALREADY = 37;

const int ENOTSOCK = 38;

const int EDESTADDRREQ = 39;

const int EMSGSIZE = 40;

const int EPROTOTYPE = 41;

const int ENOPROTOOPT = 42;

const int EPROTONOSUPPORT = 43;

const int ESOCKTNOSUPPORT = 44;

const int ENOTSUP = 45;

const int EPFNOSUPPORT = 46;

const int EAFNOSUPPORT = 47;

const int EADDRINUSE = 48;

const int EADDRNOTAVAIL = 49;

const int ENETDOWN = 50;

const int ENETUNREACH = 51;

const int ENETRESET = 52;

const int ECONNABORTED = 53;

const int ECONNRESET = 54;

const int ENOBUFS = 55;

const int EISCONN = 56;

const int ENOTCONN = 57;

const int ESHUTDOWN = 58;

const int ETOOMANYREFS = 59;

const int ETIMEDOUT = 60;

const int ECONNREFUSED = 61;

const int ELOOP = 62;

const int ENAMETOOLONG = 63;

const int EHOSTDOWN = 64;

const int EHOSTUNREACH = 65;

const int ENOTEMPTY = 66;

const int EPROCLIM = 67;

const int EUSERS = 68;

const int EDQUOT = 69;

const int ESTALE = 70;

const int EREMOTE = 71;

const int EBADRPC = 72;

const int ERPCMISMATCH = 73;

const int EPROGUNAVAIL = 74;

const int EPROGMISMATCH = 75;

const int EPROCUNAVAIL = 76;

const int ENOLCK = 77;

const int ENOSYS = 78;

const int EFTYPE = 79;

const int EAUTH = 80;

const int ENEEDAUTH = 81;

const int EPWROFF = 82;

const int EDEVERR = 83;

const int EOVERFLOW = 84;

const int EBADEXEC = 85;

const int EBADARCH = 86;

const int ESHLIBVERS = 87;

const int EBADMACHO = 88;

const int ECANCELED = 89;

const int EIDRM = 90;

const int ENOMSG = 91;

const int EILSEQ = 92;

const int ENOATTR = 93;

const int EBADMSG = 94;

const int EMULTIHOP = 95;

const int ENODATA = 96;

const int ENOLINK = 97;

const int ENOSR = 98;

const int ENOSTR = 99;

const int EPROTO = 100;

const int ETIME = 101;

const int EOPNOTSUPP = 102;

const int ENOPOLICY = 103;

const int ENOTRECOVERABLE = 104;

const int EOWNERDEAD = 105;

const int EQFULL = 106;

const int ELAST = 106;

const int __DARWIN_NULL = 0;

const int __PTHREAD_SIZE__ = 8176;

const int __PTHREAD_ATTR_SIZE__ = 56;

const int __PTHREAD_MUTEXATTR_SIZE__ = 8;

const int __PTHREAD_MUTEX_SIZE__ = 56;

const int __PTHREAD_CONDATTR_SIZE__ = 8;

const int __PTHREAD_COND_SIZE__ = 40;

const int __PTHREAD_ONCE_SIZE__ = 8;

const int __PTHREAD_RWLOCK_SIZE__ = 192;

const int __PTHREAD_RWLOCKATTR_SIZE__ = 16;

const int __DARWIN_WCHAR_MAX = 2147483647;

const int __DARWIN_WCHAR_MIN = -2147483648;

const int __DARWIN_WEOF = -1;

const int _FORTIFY_SOURCE = 2;

const int NULL = 0;

const int USER_ADDR_NULL = 0;

const int __API_TO_BE_DEPRECATED = 100000;

const int __API_TO_BE_DEPRECATED_MACOS = 100000;

const int __API_TO_BE_DEPRECATED_IOS = 100000;

const int __API_TO_BE_DEPRECATED_TVOS = 100000;

const int __API_TO_BE_DEPRECATED_WATCHOS = 100000;

const int __API_TO_BE_DEPRECATED_MACCATALYST = 100000;

const int __API_TO_BE_DEPRECATED_DRIVERKIT = 100000;

const int __MAC_10_0 = 1000;

const int __MAC_10_1 = 1010;

const int __MAC_10_2 = 1020;

const int __MAC_10_3 = 1030;

const int __MAC_10_4 = 1040;

const int __MAC_10_5 = 1050;

const int __MAC_10_6 = 1060;

const int __MAC_10_7 = 1070;

const int __MAC_10_8 = 1080;

const int __MAC_10_9 = 1090;

const int __MAC_10_10 = 101000;

const int __MAC_10_10_2 = 101002;

const int __MAC_10_10_3 = 101003;

const int __MAC_10_11 = 101100;

const int __MAC_10_11_2 = 101102;

const int __MAC_10_11_3 = 101103;

const int __MAC_10_11_4 = 101104;

const int __MAC_10_12 = 101200;

const int __MAC_10_12_1 = 101201;

const int __MAC_10_12_2 = 101202;

const int __MAC_10_12_4 = 101204;

const int __MAC_10_13 = 101300;

const int __MAC_10_13_1 = 101301;

const int __MAC_10_13_2 = 101302;

const int __MAC_10_13_4 = 101304;

const int __MAC_10_14 = 101400;

const int __MAC_10_14_1 = 101401;

const int __MAC_10_14_4 = 101404;

const int __MAC_10_14_6 = 101406;

const int __MAC_10_15 = 101500;

const int __MAC_10_15_1 = 101501;

const int __MAC_10_15_4 = 101504;

const int __MAC_10_16 = 101600;

const int __MAC_11_0 = 110000;

const int __MAC_11_1 = 110100;

const int __MAC_11_3 = 110300;

const int __MAC_11_4 = 110400;

const int __MAC_11_5 = 110500;

const int __MAC_11_6 = 110600;

const int __MAC_12_0 = 120000;

const int __MAC_12_1 = 120100;

const int __MAC_12_2 = 120200;

const int __MAC_12_3 = 120300;

const int __MAC_13_0 = 130000;

const int __MAC_13_1 = 130100;

const int __MAC_13_2 = 130200;

const int __MAC_13_3 = 130300;

const int __IPHONE_2_0 = 20000;

const int __IPHONE_2_1 = 20100;

const int __IPHONE_2_2 = 20200;

const int __IPHONE_3_0 = 30000;

const int __IPHONE_3_1 = 30100;

const int __IPHONE_3_2 = 30200;

const int __IPHONE_4_0 = 40000;

const int __IPHONE_4_1 = 40100;

const int __IPHONE_4_2 = 40200;

const int __IPHONE_4_3 = 40300;

const int __IPHONE_5_0 = 50000;

const int __IPHONE_5_1 = 50100;

const int __IPHONE_6_0 = 60000;

const int __IPHONE_6_1 = 60100;

const int __IPHONE_7_0 = 70000;

const int __IPHONE_7_1 = 70100;

const int __IPHONE_8_0 = 80000;

const int __IPHONE_8_1 = 80100;

const int __IPHONE_8_2 = 80200;

const int __IPHONE_8_3 = 80300;

const int __IPHONE_8_4 = 80400;

const int __IPHONE_9_0 = 90000;

const int __IPHONE_9_1 = 90100;

const int __IPHONE_9_2 = 90200;

const int __IPHONE_9_3 = 90300;

const int __IPHONE_10_0 = 100000;

const int __IPHONE_10_1 = 100100;

const int __IPHONE_10_2 = 100200;

const int __IPHONE_10_3 = 100300;

const int __IPHONE_11_0 = 110000;

const int __IPHONE_11_1 = 110100;

const int __IPHONE_11_2 = 110200;

const int __IPHONE_11_3 = 110300;

const int __IPHONE_11_4 = 110400;

const int __IPHONE_12_0 = 120000;

const int __IPHONE_12_1 = 120100;

const int __IPHONE_12_2 = 120200;

const int __IPHONE_12_3 = 120300;

const int __IPHONE_12_4 = 120400;

const int __IPHONE_13_0 = 130000;

const int __IPHONE_13_1 = 130100;

const int __IPHONE_13_2 = 130200;

const int __IPHONE_13_3 = 130300;

const int __IPHONE_13_4 = 130400;

const int __IPHONE_13_5 = 130500;

const int __IPHONE_13_6 = 130600;

const int __IPHONE_13_7 = 130700;

const int __IPHONE_14_0 = 140000;

const int __IPHONE_14_1 = 140100;

const int __IPHONE_14_2 = 140200;

const int __IPHONE_14_3 = 140300;

const int __IPHONE_14_5 = 140500;

const int __IPHONE_14_6 = 140600;

const int __IPHONE_14_7 = 140700;

const int __IPHONE_14_8 = 140800;

const int __IPHONE_15_0 = 150000;

const int __IPHONE_15_1 = 150100;

const int __IPHONE_15_2 = 150200;

const int __IPHONE_15_3 = 150300;

const int __IPHONE_15_4 = 150400;

const int __IPHONE_16_0 = 160000;

const int __IPHONE_16_1 = 160100;

const int __IPHONE_16_2 = 160200;

const int __IPHONE_16_3 = 160300;

const int __IPHONE_16_4 = 160400;

const int __TVOS_9_0 = 90000;

const int __TVOS_9_1 = 90100;

const int __TVOS_9_2 = 90200;

const int __TVOS_10_0 = 100000;

const int __TVOS_10_0_1 = 100001;

const int __TVOS_10_1 = 100100;

const int __TVOS_10_2 = 100200;

const int __TVOS_11_0 = 110000;

const int __TVOS_11_1 = 110100;

const int __TVOS_11_2 = 110200;

const int __TVOS_11_3 = 110300;

const int __TVOS_11_4 = 110400;

const int __TVOS_12_0 = 120000;

const int __TVOS_12_1 = 120100;

const int __TVOS_12_2 = 120200;

const int __TVOS_12_3 = 120300;

const int __TVOS_12_4 = 120400;

const int __TVOS_13_0 = 130000;

const int __TVOS_13_2 = 130200;

const int __TVOS_13_3 = 130300;

const int __TVOS_13_4 = 130400;

const int __TVOS_14_0 = 140000;

const int __TVOS_14_1 = 140100;

const int __TVOS_14_2 = 140200;

const int __TVOS_14_3 = 140300;

const int __TVOS_14_5 = 140500;

const int __TVOS_14_6 = 140600;

const int __TVOS_14_7 = 140700;

const int __TVOS_15_0 = 150000;

const int __TVOS_15_1 = 150100;

const int __TVOS_15_2 = 150200;

const int __TVOS_15_3 = 150300;

const int __TVOS_15_4 = 150400;

const int __TVOS_16_0 = 160000;

const int __TVOS_16_1 = 160100;

const int __TVOS_16_2 = 160200;

const int __TVOS_16_3 = 160300;

const int __TVOS_16_4 = 160400;

const int __WATCHOS_1_0 = 10000;

const int __WATCHOS_2_0 = 20000;

const int __WATCHOS_2_1 = 20100;

const int __WATCHOS_2_2 = 20200;

const int __WATCHOS_3_0 = 30000;

const int __WATCHOS_3_1 = 30100;

const int __WATCHOS_3_1_1 = 30101;

const int __WATCHOS_3_2 = 30200;

const int __WATCHOS_4_0 = 40000;

const int __WATCHOS_4_1 = 40100;

const int __WATCHOS_4_2 = 40200;

const int __WATCHOS_4_3 = 40300;

const int __WATCHOS_5_0 = 50000;

const int __WATCHOS_5_1 = 50100;

const int __WATCHOS_5_2 = 50200;

const int __WATCHOS_5_3 = 50300;

const int __WATCHOS_6_0 = 60000;

const int __WATCHOS_6_1 = 60100;

const int __WATCHOS_6_2 = 60200;

const int __WATCHOS_7_0 = 70000;

const int __WATCHOS_7_1 = 70100;

const int __WATCHOS_7_2 = 70200;

const int __WATCHOS_7_3 = 70300;

const int __WATCHOS_7_4 = 70400;

const int __WATCHOS_7_5 = 70500;

const int __WATCHOS_7_6 = 70600;

const int __WATCHOS_8_0 = 80000;

const int __WATCHOS_8_1 = 80100;

const int __WATCHOS_8_3 = 80300;

const int __WATCHOS_8_4 = 80400;

const int __WATCHOS_8_5 = 80500;

const int __WATCHOS_9_0 = 90000;

const int __WATCHOS_9_1 = 90100;

const int __WATCHOS_9_2 = 90200;

const int __WATCHOS_9_3 = 90300;

const int __WATCHOS_9_4 = 90400;

const int MAC_OS_X_VERSION_10_0 = 1000;

const int MAC_OS_X_VERSION_10_1 = 1010;

const int MAC_OS_X_VERSION_10_2 = 1020;

const int MAC_OS_X_VERSION_10_3 = 1030;

const int MAC_OS_X_VERSION_10_4 = 1040;

const int MAC_OS_X_VERSION_10_5 = 1050;

const int MAC_OS_X_VERSION_10_6 = 1060;

const int MAC_OS_X_VERSION_10_7 = 1070;

const int MAC_OS_X_VERSION_10_8 = 1080;

const int MAC_OS_X_VERSION_10_9 = 1090;

const int MAC_OS_X_VERSION_10_10 = 101000;

const int MAC_OS_X_VERSION_10_10_2 = 101002;

const int MAC_OS_X_VERSION_10_10_3 = 101003;

const int MAC_OS_X_VERSION_10_11 = 101100;

const int MAC_OS_X_VERSION_10_11_2 = 101102;

const int MAC_OS_X_VERSION_10_11_3 = 101103;

const int MAC_OS_X_VERSION_10_11_4 = 101104;

const int MAC_OS_X_VERSION_10_12 = 101200;

const int MAC_OS_X_VERSION_10_12_1 = 101201;

const int MAC_OS_X_VERSION_10_12_2 = 101202;

const int MAC_OS_X_VERSION_10_12_4 = 101204;

const int MAC_OS_X_VERSION_10_13 = 101300;

const int MAC_OS_X_VERSION_10_13_1 = 101301;

const int MAC_OS_X_VERSION_10_13_2 = 101302;

const int MAC_OS_X_VERSION_10_13_4 = 101304;

const int MAC_OS_X_VERSION_10_14 = 101400;

const int MAC_OS_X_VERSION_10_14_1 = 101401;

const int MAC_OS_X_VERSION_10_14_4 = 101404;

const int MAC_OS_X_VERSION_10_14_6 = 101406;

const int MAC_OS_X_VERSION_10_15 = 101500;

const int MAC_OS_X_VERSION_10_15_1 = 101501;

const int MAC_OS_X_VERSION_10_16 = 101600;

const int MAC_OS_VERSION_11_0 = 110000;

const int MAC_OS_VERSION_12_0 = 120000;

const int MAC_OS_VERSION_13_0 = 130000;

const int __DRIVERKIT_19_0 = 190000;

const int __DRIVERKIT_20_0 = 200000;

const int __DRIVERKIT_21_0 = 210000;

const int __MAC_OS_X_VERSION_MIN_REQUIRED = 130000;

const int __MAC_OS_X_VERSION_MAX_ALLOWED = 130300;

const int __ENABLE_LEGACY_MAC_AVAILABILITY = 1;

const int RENAME_SECLUDE = 1;

const int RENAME_SWAP = 2;

const int RENAME_EXCL = 4;

const int RENAME_RESERVED1 = 8;

const int RENAME_NOFOLLOW_ANY = 16;

const int __SLBF = 1;

const int __SNBF = 2;

const int __SRD = 4;

const int __SWR = 8;

const int __SRW = 16;

const int __SEOF = 32;

const int __SERR = 64;

const int __SMBF = 128;

const int __SAPP = 256;

const int __SSTR = 512;

const int __SOPT = 1024;

const int __SNPT = 2048;

const int __SOFF = 4096;

const int __SMOD = 8192;

const int __SALC = 16384;

const int __SIGN = 32768;

const int _IOFBF = 0;

const int _IOLBF = 1;

const int _IONBF = 2;

const int BUFSIZ = 1024;

const int EOF = -1;

const int FOPEN_MAX = 20;

const int FILENAME_MAX = 1024;

const String P_tmpdir = '/var/tmp/';

const int L_tmpnam = 1024;

const int TMP_MAX = 308915776;

const int SEEK_SET = 0;

const int SEEK_CUR = 1;

const int SEEK_END = 2;

const int L_ctermid = 1024;

const int ZMQ_DEFINED_STDINT = 1;

const int __WORDSIZE = 64;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -32768;

const int INT_FAST32_MIN = -2147483648;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 32767;

const int INT_FAST32_MAX = 2147483647;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = 65535;

const int UINT_FAST32_MAX = 4294967295;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MAX = 9223372036854775807;

const int INTPTR_MIN = -9223372036854775808;

const int UINTPTR_MAX = -1;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIZE_MAX = -1;

const int RSIZE_MAX = 9223372036854775807;

const int WCHAR_MAX = 2147483647;

const int WCHAR_MIN = -2147483648;

const int WINT_MIN = -2147483648;

const int WINT_MAX = 2147483647;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;

const int __DARWIN_NSIG = 32;

const int NSIG = 32;

const int _I386_SIGNAL_H_ = 1;

const int SIGHUP = 1;

const int SIGINT = 2;

const int SIGQUIT = 3;

const int SIGILL = 4;

const int SIGTRAP = 5;

const int SIGABRT = 6;

const int SIGIOT = 6;

const int SIGEMT = 7;

const int SIGFPE = 8;

const int SIGKILL = 9;

const int SIGBUS = 10;

const int SIGSEGV = 11;

const int SIGSYS = 12;

const int SIGPIPE = 13;

const int SIGALRM = 14;

const int SIGTERM = 15;

const int SIGURG = 16;

const int SIGSTOP = 17;

const int SIGTSTP = 18;

const int SIGCONT = 19;

const int SIGCHLD = 20;

const int SIGTTIN = 21;

const int SIGTTOU = 22;

const int SIGIO = 23;

const int SIGXCPU = 24;

const int SIGXFSZ = 25;

const int SIGVTALRM = 26;

const int SIGPROF = 27;

const int SIGWINCH = 28;

const int SIGINFO = 29;

const int SIGUSR1 = 30;

const int SIGUSR2 = 31;

const int FP_PREC_24B = 0;

const int FP_PREC_53B = 2;

const int FP_PREC_64B = 3;

const int FP_RND_NEAR = 0;

const int FP_RND_DOWN = 1;

const int FP_RND_UP = 2;

const int FP_CHOP = 3;

const int FP_STATE_BYTES = 512;

const int _X86_INSTRUCTION_STATE_MAX_INSN_BYTES = 2380;

const int _X86_INSTRUCTION_STATE_CACHELINE_SIZE = 64;

const int __LASTBRANCH_MAX = 32;

const int SIGEV_NONE = 0;

const int SIGEV_SIGNAL = 1;

const int SIGEV_THREAD = 3;

const int ILL_NOOP = 0;

const int ILL_ILLOPC = 1;

const int ILL_ILLTRP = 2;

const int ILL_PRVOPC = 3;

const int ILL_ILLOPN = 4;

const int ILL_ILLADR = 5;

const int ILL_PRVREG = 6;

const int ILL_COPROC = 7;

const int ILL_BADSTK = 8;

const int FPE_NOOP = 0;

const int FPE_FLTDIV = 1;

const int FPE_FLTOVF = 2;

const int FPE_FLTUND = 3;

const int FPE_FLTRES = 4;

const int FPE_FLTINV = 5;

const int FPE_FLTSUB = 6;

const int FPE_INTDIV = 7;

const int FPE_INTOVF = 8;

const int SEGV_NOOP = 0;

const int SEGV_MAPERR = 1;

const int SEGV_ACCERR = 2;

const int BUS_NOOP = 0;

const int BUS_ADRALN = 1;

const int BUS_ADRERR = 2;

const int BUS_OBJERR = 3;

const int TRAP_BRKPT = 1;

const int TRAP_TRACE = 2;

const int CLD_NOOP = 0;

const int CLD_EXITED = 1;

const int CLD_KILLED = 2;

const int CLD_DUMPED = 3;

const int CLD_TRAPPED = 4;

const int CLD_STOPPED = 5;

const int CLD_CONTINUED = 6;

const int POLL_IN = 1;

const int POLL_OUT = 2;

const int POLL_MSG = 3;

const int POLL_ERR = 4;

const int POLL_PRI = 5;

const int POLL_HUP = 6;

const int SA_ONSTACK = 1;

const int SA_RESTART = 2;

const int SA_RESETHAND = 4;

const int SA_NOCLDSTOP = 8;

const int SA_NODEFER = 16;

const int SA_NOCLDWAIT = 32;

const int SA_SIGINFO = 64;

const int SA_USERTRAMP = 256;

const int SA_64REGSET = 512;

const int SA_USERSPACE_MASK = 127;

const int SIG_BLOCK = 1;

const int SIG_UNBLOCK = 2;

const int SIG_SETMASK = 3;

const int SI_USER = 65537;

const int SI_QUEUE = 65538;

const int SI_TIMER = 65539;

const int SI_ASYNCIO = 65540;

const int SI_MESGQ = 65541;

const int SS_ONSTACK = 1;

const int SS_DISABLE = 4;

const int MINSIGSTKSZ = 32768;

const int SIGSTKSZ = 131072;

const int SV_ONSTACK = 1;

const int SV_INTERRUPT = 2;

const int SV_RESETHAND = 4;

const int SV_NODEFER = 16;

const int SV_NOCLDSTOP = 8;

const int SV_SIGINFO = 64;

const int ZMQ_HAUSNUMERO = 156384712;

const int EFSM = 156384763;

const int ENOCOMPATPROTO = 156384764;

const int ETERM = 156384765;

const int EMTHREAD = 156384766;

const int ZMQ_IO_THREADS = 1;

const int ZMQ_MAX_SOCKETS = 2;

const int ZMQ_SOCKET_LIMIT = 3;

const int ZMQ_THREAD_PRIORITY = 3;

const int ZMQ_THREAD_SCHED_POLICY = 4;

const int ZMQ_MAX_MSGSZ = 5;

const int ZMQ_MSG_T_SIZE = 6;

const int ZMQ_THREAD_AFFINITY_CPU_ADD = 7;

const int ZMQ_THREAD_AFFINITY_CPU_REMOVE = 8;

const int ZMQ_THREAD_NAME_PREFIX = 9;

const int ZMQ_IO_THREADS_DFLT = 1;

const int ZMQ_MAX_SOCKETS_DFLT = 1023;

const int ZMQ_THREAD_PRIORITY_DFLT = -1;

const int ZMQ_THREAD_SCHED_POLICY_DFLT = -1;

const int ZMQ_PAIR = 0;

const int ZMQ_PUB = 1;

const int ZMQ_SUB = 2;

const int ZMQ_REQ = 3;

const int ZMQ_REP = 4;

const int ZMQ_DEALER = 5;

const int ZMQ_ROUTER = 6;

const int ZMQ_PULL = 7;

const int ZMQ_PUSH = 8;

const int ZMQ_XPUB = 9;

const int ZMQ_XSUB = 10;

const int ZMQ_STREAM = 11;

const int ZMQ_XREQ = 5;

const int ZMQ_XREP = 6;

const int ZMQ_AFFINITY = 4;

const int ZMQ_ROUTING_ID = 5;

const int ZMQ_SUBSCRIBE = 6;

const int ZMQ_UNSUBSCRIBE = 7;

const int ZMQ_RATE = 8;

const int ZMQ_RECOVERY_IVL = 9;

const int ZMQ_SNDBUF = 11;

const int ZMQ_RCVBUF = 12;

const int ZMQ_RCVMORE = 13;

const int ZMQ_FD = 14;

const int ZMQ_EVENTS = 15;

const int ZMQ_TYPE = 16;

const int ZMQ_LINGER = 17;

const int ZMQ_RECONNECT_IVL = 18;

const int ZMQ_BACKLOG = 19;

const int ZMQ_RECONNECT_IVL_MAX = 21;

const int ZMQ_MAXMSGSIZE = 22;

const int ZMQ_SNDHWM = 23;

const int ZMQ_RCVHWM = 24;

const int ZMQ_MULTICAST_HOPS = 25;

const int ZMQ_RCVTIMEO = 27;

const int ZMQ_SNDTIMEO = 28;

const int ZMQ_LAST_ENDPOINT = 32;

const int ZMQ_ROUTER_MANDATORY = 33;

const int ZMQ_TCP_KEEPALIVE = 34;

const int ZMQ_TCP_KEEPALIVE_CNT = 35;

const int ZMQ_TCP_KEEPALIVE_IDLE = 36;

const int ZMQ_TCP_KEEPALIVE_INTVL = 37;

const int ZMQ_IMMEDIATE = 39;

const int ZMQ_XPUB_VERBOSE = 40;

const int ZMQ_ROUTER_RAW = 41;

const int ZMQ_IPV6 = 42;

const int ZMQ_MECHANISM = 43;

const int ZMQ_PLAIN_SERVER = 44;

const int ZMQ_PLAIN_USERNAME = 45;

const int ZMQ_PLAIN_PASSWORD = 46;

const int ZMQ_CURVE_SERVER = 47;

const int ZMQ_CURVE_PUBLICKEY = 48;

const int ZMQ_CURVE_SECRETKEY = 49;

const int ZMQ_CURVE_SERVERKEY = 50;

const int ZMQ_PROBE_ROUTER = 51;

const int ZMQ_REQ_CORRELATE = 52;

const int ZMQ_REQ_RELAXED = 53;

const int ZMQ_CONFLATE = 54;

const int ZMQ_ZAP_DOMAIN = 55;

const int ZMQ_ROUTER_HANDOVER = 56;

const int ZMQ_TOS = 57;

const int ZMQ_CONNECT_ROUTING_ID = 61;

const int ZMQ_GSSAPI_SERVER = 62;

const int ZMQ_GSSAPI_PRINCIPAL = 63;

const int ZMQ_GSSAPI_SERVICE_PRINCIPAL = 64;

const int ZMQ_GSSAPI_PLAINTEXT = 65;

const int ZMQ_HANDSHAKE_IVL = 66;

const int ZMQ_SOCKS_PROXY = 68;

const int ZMQ_XPUB_NODROP = 69;

const int ZMQ_BLOCKY = 70;

const int ZMQ_XPUB_MANUAL = 71;

const int ZMQ_XPUB_WELCOME_MSG = 72;

const int ZMQ_STREAM_NOTIFY = 73;

const int ZMQ_INVERT_MATCHING = 74;

const int ZMQ_HEARTBEAT_IVL = 75;

const int ZMQ_HEARTBEAT_TTL = 76;

const int ZMQ_HEARTBEAT_TIMEOUT = 77;

const int ZMQ_XPUB_VERBOSER = 78;

const int ZMQ_CONNECT_TIMEOUT = 79;

const int ZMQ_TCP_MAXRT = 80;

const int ZMQ_THREAD_SAFE = 81;

const int ZMQ_MULTICAST_MAXTPDU = 84;

const int ZMQ_VMCI_BUFFER_SIZE = 85;

const int ZMQ_VMCI_BUFFER_MIN_SIZE = 86;

const int ZMQ_VMCI_BUFFER_MAX_SIZE = 87;

const int ZMQ_VMCI_CONNECT_TIMEOUT = 88;

const int ZMQ_USE_FD = 89;

const int ZMQ_GSSAPI_PRINCIPAL_NAMETYPE = 90;

const int ZMQ_GSSAPI_SERVICE_PRINCIPAL_NAMETYPE = 91;

const int ZMQ_BINDTODEVICE = 92;

const int ZMQ_MORE = 1;

const int ZMQ_SHARED = 3;

const int ZMQ_DONTWAIT = 1;

const int ZMQ_SNDMORE = 2;

const int ZMQ_NULL = 0;

const int ZMQ_PLAIN = 1;

const int ZMQ_CURVE = 2;

const int ZMQ_GSSAPI = 3;

const int ZMQ_GROUP_MAX_LENGTH = 255;

const int ZMQ_IDENTITY = 5;

const int ZMQ_CONNECT_RID = 61;

const int ZMQ_TCP_ACCEPT_FILTER = 38;

const int ZMQ_IPC_FILTER_PID = 58;

const int ZMQ_IPC_FILTER_UID = 59;

const int ZMQ_IPC_FILTER_GID = 60;

const int ZMQ_IPV4ONLY = 31;

const int ZMQ_DELAY_ATTACH_ON_CONNECT = 39;

const int ZMQ_NOBLOCK = 1;

const int ZMQ_FAIL_UNROUTABLE = 33;

const int ZMQ_ROUTER_BEHAVIOR = 33;

const int ZMQ_SRCFD = 2;

const int ZMQ_GSSAPI_NT_HOSTBASED = 0;

const int ZMQ_GSSAPI_NT_USER_NAME = 1;

const int ZMQ_GSSAPI_NT_KRB5_PRINCIPAL = 2;

const int ZMQ_EVENT_CONNECTED = 1;

const int ZMQ_EVENT_CONNECT_DELAYED = 2;

const int ZMQ_EVENT_CONNECT_RETRIED = 4;

const int ZMQ_EVENT_LISTENING = 8;

const int ZMQ_EVENT_BIND_FAILED = 16;

const int ZMQ_EVENT_ACCEPTED = 32;

const int ZMQ_EVENT_ACCEPT_FAILED = 64;

const int ZMQ_EVENT_CLOSED = 128;

const int ZMQ_EVENT_CLOSE_FAILED = 256;

const int ZMQ_EVENT_DISCONNECTED = 512;

const int ZMQ_EVENT_MONITOR_STOPPED = 1024;

const int ZMQ_EVENT_ALL = 65535;

const int ZMQ_EVENT_HANDSHAKE_FAILED_NO_DETAIL = 2048;

const int ZMQ_EVENT_HANDSHAKE_SUCCEEDED = 4096;

const int ZMQ_EVENT_HANDSHAKE_FAILED_PROTOCOL = 8192;

const int ZMQ_EVENT_HANDSHAKE_FAILED_AUTH = 16384;

const int ZMQ_PROTOCOL_ERROR_ZMTP_UNSPECIFIED = 268435456;

const int ZMQ_PROTOCOL_ERROR_ZMTP_UNEXPECTED_COMMAND = 268435457;

const int ZMQ_PROTOCOL_ERROR_ZMTP_INVALID_SEQUENCE = 268435458;

const int ZMQ_PROTOCOL_ERROR_ZMTP_KEY_EXCHANGE = 268435459;

const int ZMQ_PROTOCOL_ERROR_ZMTP_MALFORMED_COMMAND_UNSPECIFIED = 268435473;

const int ZMQ_PROTOCOL_ERROR_ZMTP_MALFORMED_COMMAND_MESSAGE = 268435474;

const int ZMQ_PROTOCOL_ERROR_ZMTP_MALFORMED_COMMAND_HELLO = 268435475;

const int ZMQ_PROTOCOL_ERROR_ZMTP_MALFORMED_COMMAND_INITIATE = 268435476;

const int ZMQ_PROTOCOL_ERROR_ZMTP_MALFORMED_COMMAND_ERROR = 268435477;

const int ZMQ_PROTOCOL_ERROR_ZMTP_MALFORMED_COMMAND_READY = 268435478;

const int ZMQ_PROTOCOL_ERROR_ZMTP_MALFORMED_COMMAND_WELCOME = 268435479;

const int ZMQ_PROTOCOL_ERROR_ZMTP_INVALID_METADATA = 268435480;

const int ZMQ_PROTOCOL_ERROR_ZMTP_CRYPTOGRAPHIC = 285212673;

const int ZMQ_PROTOCOL_ERROR_ZMTP_MECHANISM_MISMATCH = 285212674;

const int ZMQ_PROTOCOL_ERROR_ZAP_UNSPECIFIED = 536870912;

const int ZMQ_PROTOCOL_ERROR_ZAP_MALFORMED_REPLY = 536870913;

const int ZMQ_PROTOCOL_ERROR_ZAP_BAD_REQUEST_ID = 536870914;

const int ZMQ_PROTOCOL_ERROR_ZAP_BAD_VERSION = 536870915;

const int ZMQ_PROTOCOL_ERROR_ZAP_INVALID_STATUS_CODE = 536870916;

const int ZMQ_PROTOCOL_ERROR_ZAP_INVALID_METADATA = 536870917;

const int ZMQ_PROTOCOL_ERROR_WS_UNSPECIFIED = 805306368;

const int ZMQ_POLLIN = 1;

const int ZMQ_POLLOUT = 2;

const int ZMQ_POLLERR = 4;

const int ZMQ_POLLPRI = 8;

const int ZMQ_POLLITEMS_DFLT = 16;

const int ZMQ_HAS_CAPABILITIES = 1;

const int ZMQ_STREAMER = 1;

const int ZMQ_FORWARDER = 2;

const int ZMQ_QUEUE = 3;
